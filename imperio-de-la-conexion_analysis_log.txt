An√°lisis del Proyecto: imperio-de-la-conexion

========================================
üìÅ Carpeta: ././
========================================

    üìÑ Archivo: README.md
    ---------- CONTENIDO ----------
    # üåê Imperio de la Conexi√≥n
    
    Un juego incremental (idle/clicker) donde construyes un imperio de telecomunicaciones desde cero, comenzando en la vibrante era de los a√±os 80.
    
    **‚ú® https://imperio-de-la-conexion.vercel.app/ ‚ú®**
    
    ---
    
    ## üìú Concepto del Juego
    
    Es la d√©cada de los 80. Los tel√©fonos son de disco y las conexiones, un lujo. En un garaje lleno de sue√±os y circuitos, fundas una peque√±a empresa con una visi√≥n audaz: conectar al mundo.
    
    Tu objetivo es evolucionar tu tecnolog√≠a, expandir tu infraestructura y generar ingresos, avanzando a trav√©s de las diferentes eras de la revoluci√≥n digital, desde las l√≠neas de cobre y los m√≥dems de 2400 baudios hasta la fibra √≥ptica y m√°s all√°.
    
    ## üöÄ Caracter√≠sticas Principales
    
    *   **Progresi√≥n por Eras:** Comienza en los 80 y avanza a trav√©s de d√©cadas de innovaci√≥n tecnol√≥gica.
    *   **Mejoras Tem√°ticas:** Todas las mejoras est√°n basadas en tecnolog√≠as reales e ic√≥nicas de cada √©poca.
    *   **Mec√°nica de Prestigio:** Utiliza los "Puntos de Innovaci√≥n" para relanzar tu imperio con bonificaciones permanentes.
    *   **Guardado Local:** Tu progreso se guarda autom√°ticamente en tu navegador usando `localStorage`.
    *   **Est√©tica Retro:** La interfaz, las fuentes y los efectos de sonido est√°n dise√±ados para evocar la nostalgia de los monitores CRT y las primeras terminales.
    
    ## üíª Pila Tecnol√≥gica
    
    Este proyecto est√° construido con tecnolog√≠a web fundamental, sin necesidad de frameworks complejos:
    
    *   **HTML5:** Para la estructura del contenido.
    *   **CSS3:** Para los estilos, animaciones y el dise√±o responsivo (utilizando Flexbox y Grid).
    *   **JavaScript (ES6):** Para toda la l√≥gica del juego, c√°lculos y manipulaci√≥n del DOM.
    *   **Howler.js:** Una biblioteca de audio para un manejo sencillo y robusto de los efectos de sonido y la m√∫sica.
    
    ## ‚ñ∂Ô∏è C√≥mo Jugar Localmente
    
    1.  Clona este repositorio en tu m√°quina local.
    2.  Abre el archivo `index.html` directamente en tu navegador web preferido (Chrome, Firefox, etc.).
    3.  ¬°A jugar!
    
    ---
    *Un proyecto de ClanHater.*
    ---------- FIN CONTENIDO ----------

    üìÑ Archivo: git
    ---------- CONTENIDO ----------

    ---------- FIN CONTENIDO ----------

    üìÑ Archivo: index.html
    ---------- CONTENIDO ----------
    <!DOCTYPE html>
    <html lang="es">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
        <title>Imperio de la Conexi√≥n</title>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Press+Start+2P&family=VT323&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="css/style.css">
    	<link rel="stylesheet" href="css/animations.css">
    	<link rel="stylesheet" href="css/icons.css">
    	<link rel="stylesheet" id="era-style" href="css/eras/era-1g.css"> 
    	<script src="https://cdnjs.cloudflare.com/ajax/libs/howler/2.2.4/howler.min.js"></script>
    </head>
    <body>
        <!-- PANTALLA DE CARGA -->
        <div id="loading-screen" class="full-screen">
    		<div class="loading-content">
    			<!-- T√≠tulo del juego para reforzar la marca -->
    			<h1 class="loading-title">Imperio de la Conexi√≥n</h1>
            
    			<!-- Contenedor de la barra de progreso -->
    			<div class="progress-bar-container">
    				<div id="progress-bar" class="progress-bar-inner"></div>
    			</div>
            
    			<!-- Texto que cambiar√° din√°micamente -->
    			<p id="loading-status-text" class="loading-status">Inicializando sistema...</p>
    		</div>
    	</div>
    	
    	<!-- PANTALLA DE ANIMACI√ìN DE INTRODUCCI√ìN -->
    	<div id="intro-terminal-screen" class="full-screen hidden">
    		<div id="intro-terminal-content">
    			<!-- El contenido de la terminal se generar√° aqu√≠ con JS -->
    		</div>
    		<button id="skip-intro-button" class="hidden">Omitir >></button>
    	</div>
    
        <!-- PANTALLA "TOCA PARA EMPEZAR" -->
        <div id="tap-to-start-screen" class="full-screen menu-background hidden">
            <div class="title-content">
                <h1>Imperio de la Conexi√≥n</h1>
                <p class="blink">Toca para empezar</p>
            </div>
        </div>
    
        <!-- MEN√ö PRINCIPAL -->
        <div id="main-menu-screen" class="full-screen menu-background hidden">
            <nav class="main-menu">
                <button id="play-button" class="menu-button">Jugar</button>
                <button id="story-button" class="menu-button">Historia</button>
                <button id="options-button-menu" class="menu-button">Opciones</button>
                <button id="credits-button" class="menu-button">Cr√©ditos</button>
            </nav>
        </div>
    
        <!-- PANTALLA DE HISTORIA -->
    	<div id="story-screen" class="full-screen menu-background hidden">
    		<div class="panel story-panel">
    			<!-- Contenido din√°mico de la tarjeta de historia -->
    			<div id="story-card-container">
    				<h2 id="story-era-display"></h2>
    				<h3 id="story-title-display"></h3>
    				<p id="story-text-display"></p>
    			</div>
    
    			<!-- Navegaci√≥n -->
    			<div class="story-navigation">
    				<button id="story-prev-button" class="story-nav-button">&lt;</button>
    				<span id="story-card-indicator">1 / 4</span>
    				<button id="story-next-button" class="story-nav-button">&gt;</button>
    			</div>
    
    			<button class="back-button story-back-button">Volver</button>
    		</div>
    	</div>
        
        <!-- PANTALLA DE OPCIONES -->
    	<div id="options-screen" class="full-screen menu-background hidden">
    		<div class="panel options-panel">
    			<h2>Opciones</h2>
    
    			<h3 class="options-header">Sonido</h3>
    			<div class="option-item">
    				<label for="music-volume">M√∫sica</label>
    				<input type="range" id="music-volume" min="0" max="1" step="0.05">
    			</div>
    			<div class="option-item">
    				<label for="sfx-volume">Efectos</label>
    				<input type="range" id="sfx-volume" min="0" max="1" step="0.05">
    			</div>
    
    			<h3 class="options-header">Jugabilidad</h3>
    			<div class="option-item">
    				<label for="prestige-confirmation-toggle">Confirmar Relanzamiento</label>
    				<label class="toggle-switch">
    					<input type="checkbox" id="prestige-confirmation-toggle">
    					<span class="slider"></span>
    				</label>
    			</div>
            
    			<h3 class="options-header">Datos de Partida</h3>
    			<div class="option-item data-buttons">
    				<button id="export-save-button" class="data-button">Exportar</button>
    				<button id="import-save-button" class="data-button">Importar</button>
    			</div>
    			<div class="option-item">
    				<button id="reset-save-button" class="danger-button">Borrar Progreso</button>
    			</div>
            
    			<button class="back-button options-back-button">Volver</button>
    		</div>
    	</div>
    
        <!-- PANTALLA DE CR√âDITOS -->
        <div id="credits-screen" class="full-screen menu-background hidden">
    		<div class="panel credits-panel">
    			<!-- El contenido se generar√° aqu√≠ con JS -->
    			<div id="credits-content-container"></div>
    		</div>
    		<button id="credits-back-button" class="back-button credits-back-button">Volver</button>
    	</div>
    	
    	<!-- PANTALLA DE CINEM√ÅTICA DE ERA -->
        <div id="era-cinematic-screen" class="full-screen hidden">
    		<!-- Acto 1: Terminal de la Era 1 -->
    		<div id="cinematic-era1-shutdown" class="cinematic-phase"></div>
    
    		<!-- Acto 2: Pantalla de BIOS -->
    		<div id="cinematic-bios" class="cinematic-phase hidden"></div>
    
    		<!-- Acto 3: Escritorio de la Era 2 -->
    		<div id="cinematic-desktop" class="cinematic-phase hidden">
    			<div id="cinematic-welcome-box">
    				<!-- Contenido generado por JS -->
    			</div>
    		</div>
    	</div>
    
        <!-- ===== ESTA ES LA PARTE RESTAURADA ===== -->
        <div id="game-container" class="game-container hidden">
    
    		<!-- (1) BARRA SUPERIOR (Nueva) -->
    		<header class="top-bar">
    			<div class="resource-display">
    				<h1 id="money-display">$0</h1>
    				<p id="dps-display">+$0 / seg</p>
    			</div>
    			<div id="active-buffs-container">
                    <!-- JavaScript insertar√° los buffs activos aqu√≠ -->
                </div>
    			<div id="top-shortcut-bar" class="top-shortcut-bar"> <!-- ID y Clase Nuevos -->
    				<button id="menu-button-shortcut" class="shortcut-btn"><i class="icon-menu-back"></i></button> 
    				<button class="shortcut-btn tab-btn" data-tab="shop-tab"><i class="icon-store"></i></button>
    				<button class="shortcut-btn tab-btn" data-tab="achievements-tab"><i class="icon-achievements"></i></button>
    				<button class="shortcut-btn tab-btn" data-tab="missions-tab"><i class="icon-missions"></i></button>
    			</div>
    		</header>
    
    		<!-- (2) CONTENIDO DE LAS PESTA√ëAS (Nuevo) -->
    		<main class="tab-content">
    
    			<!-- Pesta√±a Principal (Juego) -->
    			<div id="main-tab" class="tab-panel active">
    				<div id="main-tab-background"></div>
    				<div class="terminal-header">
    					<p>IDC_OS v1.0 - [Imperio de la Conexi√≥n]</p>
    					<p>ESTADO DE LA RED: <span class="status-online blink">EN L√çNEA</span></p>
    				</div>
    				<div class="prestige-info-top">
    					<p id="prestige-points-display">Puntos de Innovaci√≥n: 0 (+0%)</p>
    				</div>
    				<div class="main-click-area">
    					<button id="main-click-button" class="main-click-button">
    						<div class="icon">üåê</div>
    						<span>Establecer<br>Conexi√≥n</span>
    						<small id="dpc-display">Ancho de Banda: +$1/conexi√≥n</small>
    					</button>
    				</div>
    			</div>
    
    			<!-- Pesta√±a Mejoras -->
    			<div id="upgrades-tab" class="tab-panel">
    				<div id="upgrades-container">
    					<!-- Las mejoras se siguen generando aqu√≠ -->
    				</div>
    			</div>
    
    			<!-- Pesta√±a Evoluci√≥n -->
    			<div id="evolution-tab" class="tab-panel">
    				<div class="evolution-content">
    					<h2>Evoluci√≥n Tecnol√≥gica</h2>
    					<div class="current-era">
    						<h3>ERA ACTUAL: <span id="current-era-name"></span></h3>
    						<p id="current-era-description"></p>
    					</div>
    					<div id="era-evolution-container">
    						<button id="evolve-era-button" class="relaunch-button-styled hidden">
    							<!-- El contenido se llenar√° con JS -->
    						</button>
    						<div id="era-evolution-requirements" class="requirements-list hidden">
    							<!-- Los requisitos se generar√°n aqu√≠ con JS -->
    						</div>
    						<p id="era-evolution-status" class="hidden">
    							<!-- El mensaje final tambi√©n estar√° aqu√≠ -->
    						</p>
    					</div>
    					<button id="relaunch-button" class="relaunch-button-styled">Relanzar</button>
    				</div>
    			</div>
    			
    			<!-- Pesta√±a Logros -->
    			<div id="achievements-tab" class="tab-panel">
    				<h2>Logros Desbloqueados</h2>
    				<div id="achievements-container" class="scrollable-content">
    					<!-- Los logros se generar√°n aqu√≠ con JS -->
    				</div>
    			</div>
    
    			<!-- Pesta√±a Misiones -->
    			<div id="missions-tab" class="tab-panel">
    				<h2>Misiones Activas</h2>
    				<div id="missions-container" class="scrollable-content">
    					<!-- Las misiones se generar√°n aqu√≠ con JS -->
    				</div>
    			</div>
    
    			<!-- Pesta√±a Tienda -->
    			<div id="shop-tab" class="tab-panel">
    				<h2>Tienda de Innovaci√≥n</h2>
    				<p class="gem-display">Gemas de Innovaci√≥n: <span id="shop-gems-display">0</span> üíé</p>
    				<div id="shop-container" class="scrollable-content">
    					<!-- Los √≠tems de la tienda se generar√°n aqu√≠ con JS -->
    				</div>
    			</div>
    
    		</main>
        
    		<div id="popup-container">
                <!-- JavaScript pondr√° el pop-up activo aqu√≠ -->
            </div>
    
            <div id="popup-templates" style="display: none;">
                <!-- Plantilla 1: Jackpot -->
                <div id="popup-template-jackpot" class="popup-banner">
                    <div class="popup-title-bar">¬°Felicidades!</div>
                    <div class="popup-content">
                        <p>¬°Eres el visitante N¬∞</p>
                        <div class="jackpot-counter">
                            <span>9</span><span>9</span><span>9</span><span>,</span><span>9</span><span>9</span><span>9</span>
                        </div>
                        <button class="popup-button">¬°RECLAMAR PREMIO!</button>
                    </div>
                </div>
    
                <!-- Plantilla 2: Frenes√≠ de Clics -->
                <div id="popup-template-clickFrenzy" class="popup-banner">
                    <div class="popup-title-bar">Descarga Finalizada</div>
                    <div class="popup-content">
                        <div class="frenzy-icon"></div>
                        <p>net_accelerator_v2.exe</p>
                        <div class="frenzy-progress-bar">
                            <div class="frenzy-progress-bar-inner"></div>
                        </div>
                        <button class="popup-button">EJECUTAR</button>
                    </div>
                </div>
    
                <!-- Plantilla 3: Sobrecarga de Red (DPS) -->
                <div id="popup-template-dpsOverload" class="popup-banner">
                    <div class="popup-title-bar">Alerta de Red</div>
                    <div class="popup-content">
                        <p>¬°PICO DE TR√ÅFICO DETECTADO!</p>
                        <div class="overload-graph">
                            <div class="graph-bar" style="height: 30%;"></div>
                            <div class="graph-bar" style="height: 50%;"></div>
                            <div class="graph-bar" style="height: 20%;"></div>
                            <div class="graph-bar" style="height: 80%;"></div>
                            <div class="graph-bar" style="height: 60%;"></div>
                        </div>
                        <button class="popup-button">OPTIMIZAR</button>
                    </div>
                </div>
            </div>
    
    		<!-- (3) BARRA DE NAVEGACI√ìN INFERIOR (Nueva) -->
    		<nav id="game-tab-bar" class="game-tab-bar"> <!-- ID y Clase Nuevos -->
    			<button id="upgrades-tab-button" class="tab-btn" data-tab="upgrades-tab"> <!-- Clase Nueva -->
    				<i class="icon-upgrades"></i><span>Mejoras</span>
    			</button>
    			<button class="tab-btn main-nav-button active" data-tab="main-tab"> <!-- Clase Nueva -->
    				<i class="icon-main"></i>
    			</button>
    			<button id="evolution-tab-button" class="tab-btn" data-tab="evolution-tab"> <!-- Clase Nueva -->
    				<i class="icon-evolution"></i><span>Evoluci√≥n</span>
    			</button>
    		</nav>
        
    	</div>
    	
    	<div id="notification-container"></div>
    
    	<script src="js/audio.js"></script>
    	<script src="js/dataLogic.js"></script>
    	<script src="js/ui.js"></script>
        <script src="js/main.js"></script>
    	
    	<div id="transition-overlay" class="transition-overlay"></div>
    </body>
    </html>
    ---------- FIN CONTENIDO ----------


    ========================================
    üìÅ Carpeta: ./css/
    ========================================

        üìÑ Archivo: animations.css
        ---------- CONTENIDO ----------
        /* ---- ANIMACI√ìN DE N√öMEROS FLOTANTES ---- */
        
        /* Define la animaci√≥n: empieza opaco, se mueve hacia arriba y se desvanece */
        @keyframes float-up {
            0% {
                opacity: 1;
                transform: translateY(0);
            }
            100% {
                opacity: 0;
                transform: translateY(-50px);
            }
        }
        
        /* Estilo para los n√∫meros que crearemos con JavaScript */
        .floating-number {
            position: absolute; /* Permite posicionarlo donde ocurri√≥ el clic */
            font-family: 'Press Start 2P', cursive;
            font-size: 1.2rem;
            color: #84FFC9; /* Color del dinero */
            text-shadow: 0 0 5px #fff;
            pointer-events: none; /* Asegura que el n√∫mero no interfiera con los clics */
            animation: float-up 1s ease-out forwards;
        }
        ---------- FIN CONTENIDO ----------

        üìÑ Archivo: icons.css
        ---------- CONTENIDO ----------
        /* En css/icons.css (Archivo Completo) */
        
        [class^="icon-"] {
            display: inline-block;
            position: relative;
            vertical-align: middle;
            width: 24px;
            height: 24px;
            color: currentColor; /* Hereda el color del bot√≥n */
        }
        
        /* --- Iconos Barra Superior --- */
        /* Resetea el estilo del bot√≥n contenedor para hacerlo invisible */
        .top-shortcut-bar .shortcut-btn {
            background: transparent;
            border: none;
            padding: 0;
            cursor: pointer;
        }
        
        .top-shortcut-bar .shortcut-btn i {
            display: flex;
            justify-content: center;
            align-items: center;
            font-style: normal; /* Para que los emojis se vean bien */
            width: 30px;
            height: 30px;
            border-radius: 2px;
            transition: all 0.2s ease;
        }
        
        .icon-store::before { content: 'üõí'; font-size: 20px; }
        .icon-achievements::before { content: 'üèÜ'; font-size: 20px; }
        .icon-missions::before { content: 'üìã'; font-size: 20px; }
        .icon-menu-back::before { content: 'üè†'; font-size: 20px; }
        
        /* --- Iconos Barra Inferior --- */
        .icon-main {
            width: 50px; height: 50px;
            background: radial-gradient(circle, #FF00A8, #8A2BE2);
            border-radius: 50%;
            border: 3px solid #fff;
            display: flex;
            justify-content: center;
            align-items: center;
            position: absolute; /* Para sacarlo del flujo */
            top: -25px; /* Lo sube para que sobresalga */
            left: 50%;
            transform: translateX(-50%);
            box-shadow: 0 0 10px #FF00A8;
        }
        .icon-main::before { content: '‚ö°'; font-size: 24px; color: #fff; text-shadow: 0 0 5px #fff; }
        .tab-btn.active .icon-main { transform: translateX(-50%) scale(1.1); }
        
        .icon-upgrades::before, .icon-upgrades::after { content:''; position: absolute; }
        .icon-upgrades::before { border-left: 12px solid transparent; border-right: 12px solid transparent; border-bottom: 16px solid currentColor; top: 4px; }
        .icon-upgrades::after { width: 8px; height: 8px; background: currentColor; border-radius: 2px; top: 11px; left: 8px; }
        
        .icon-evolution::before, .icon-evolution::after { content:''; position: absolute; border: 2px solid currentColor; border-radius: 50%; }
        .icon-evolution::before { width: 10px; height: 10px; top: 2px; left: 5px; }
        .icon-evolution::after { width: 18px; height: 18px; top: -2px; left: 1px; }
        ---------- FIN CONTENIDO ----------

        üìÑ Archivo: style.css
        ---------- CONTENIDO ----------
        /* ---- RESET Y ESTILOS GLOBALES ---- */
        * { box-sizing: border-box; margin: 0; padding: 0; }
        body { 
            font-family: 'VT323', monospace; 
            background-color: #0D0221; 
            color: #F2E9F4; /* Color de fallback */
            display: flex; 
            justify-content: center; 
            align-items: center; 
            min-height: 100vh; 
            font-size: 18px; 
            user-select: none; 
        }
        
        /* 
        ==================================================================
           ESTILOS PARA LA SECUENCIA DE INICIO Y MEN√öS (PANTALLAS COMPLETAS)
        ==================================================================
        */
        .full-screen { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: #0D0221; z-index: 200; display: flex; justify-content: center; align-items: center; text-align: center; color: #F2E9F4; }
        .hidden { display: none !important; }
        .loading-content {
            animation: fadeIn 1.5s ease-in-out;
            display: flex;
            flex-direction: column;
            align-items: center;
            width: 100%; /* Asegura que el contenedor tenga espacio para centrar */
        }
        .loading-content.fade-out { animation: fadeOut 1.5s ease-in-out forwards; }
        .loading-content p { font-size: 1.5rem; color: #00F5D4; margin-bottom: 20px; text-shadow: 0 0 5px #00F5D4; }
        .loader { border: 8px solid #2A1B3D; border-top: 8px solid #00F5D4; border-radius: 50%; width: 60px; height: 60px; animation: spin 1.5s linear infinite; margin: 0 auto; }
        .menu-background { background-image: url('../assets/images/title-background.jpg'); background-size: cover; background-position: center; background-repeat: no-repeat; cursor: default; }
        .menu-background::before { content: ''; position: absolute; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.6); z-index: 1; }
        #tap-to-start-screen { cursor: pointer; }
        .title-content, .main-menu, .panel, .credits-container { position: relative; z-index: 2; }
        .title-content h1 { font-family: 'Press Start 2P', cursive; font-size: 2.5rem; color: #FF00A8; text-shadow: 0 0 10px #FF00A8, 0 0 5px #fff; margin-bottom: 40px; }
        .title-content .blink { font-size: 1.8rem; animation: blink 1.5s linear infinite; }
        .main-menu { display: flex; flex-direction: column; gap: 20px; width: 250px; }
        .menu-button { padding: 15px; background-color: transparent; color: #00F5D4; border: 3px solid #00F5D4; border-radius: 5px; cursor: pointer; font-family: 'Press Start 2P', cursive; font-size: 1.5rem; text-shadow: 0 0 5px #00F5D4; transition: all 0.2s ease; }
        .menu-button:hover { background-color: #00F5D4; color: #0D0221; box-shadow: 0 0 15px #00F5D4; }
        .panel { width: 90%; max-width: 420px; background-color: rgba(13, 2, 33, 0.85); border: 3px solid #FF00A8; padding: 25px; text-align: center; }
        .panel h2 { font-family: 'Press Start 2P', cursive; color: #00F5D4; margin-bottom: 30px; }
        .panel p { font-size: 1.2rem; line-height: 1.5; margin-bottom: 30px; }
        .option-item { display: flex; justify-content: space-between; align-items: center; margin-bottom: 25px; font-size: 1.3rem; }
        input[type="range"] { width: 50%; }
        .back-button, #close-popup-button {
            padding: 10px 20px;
            font-size: 1.2rem;
            background-color: #555;
            color: #fff;
            border: none;
            cursor: pointer;
        }
        .danger-button { background-color: #D32F2F; color: white; border: none; padding: 10px 15px; font-size: 1.1rem; cursor: pointer; }
        /* ---- ESTILOS PARA LA NUEVA PANTALLA DE CR√âDITOS ---- */
        
        .credits-panel {
            width: 90%;
            max-width: 600px; /* Un poco m√°s ancho para el texto de terminal */
            height: 80%;
            padding: 20px;
            border-color: #00F5D4; /* Cambiamos el color del borde para diferenciarlo */
        }
        
        /* El contenedor de nuestra "pantalla" de terminal */
        #credits-content-container {
            width: 100%;
            height: 100%;
            font-family: 'VT323', monospace;
            color: #00FF00; /* Texto verde f√≥sforo */
            text-shadow: 0 0 5px rgba(0, 255, 0, 0.7);
            text-align: left; /* Alineamos a la izquierda como una terminal real */
            overflow-y: auto; /* Scroll si el contenido es muy largo */
            background-color: rgba(0, 0, 0, 0.3);
            padding: 15px;
            white-space: pre-wrap; /* Respeta los espacios y saltos de l√≠nea */
        }
        
        /* Reutilizamos el estilo del cursor de la intro */
        #credits-content-container .cursor {
            display: inline-block;
            background-color: #00FF00;
            width: 10px;
            height: 1.5rem;
            animation: blink 1s linear infinite;
            vertical-align: middle;
            margin-left: 2px;
        }
        
        /* Posicionamos el bot√≥n de volver de forma fija */
        #credits-back-button {
            position: fixed; /* Lo fijamos en la pantalla */
            bottom: 20px;
            left: 50%;
            transform: translateX(-50%);
            z-index: 205; /* Asegura que est√© por encima del fondo oscuro */
        }
        /* ---- ESTILOS PARA LA NUEVA PANTALLA DE HISTORIA ---- */
        
        .story-panel {
            display: flex;
            flex-direction: column;
            justify-content: space-between;
            height: 70%;
            max-height: 500px;
        }
        
        #story-card-container {
            flex-grow: 1;
            overflow-y: auto;
            padding-right: 10px; /* Espacio para la barra de scroll si es necesaria */
            transition: opacity 0.3s ease-in-out;
        }
        
        #story-card-container h3 {
            font-family: 'Press Start 2P', cursive;
            color: #FFFF00; /* Amarillo para el t√≠tulo, como en la era 1G */
            margin-top: 20px;
            margin-bottom: 20px;
            font-size: 1.1rem;
        }
        
        .story-navigation {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 25px;
            flex-shrink: 0;
        }
        
        .story-nav-button {
            background: transparent;
            border: 2px solid #00F5D4;
            color: #00F5D4;
            font-size: 2rem;
            cursor: pointer;
            padding: 0 15px;
            transition: all 0.2s ease;
        }
        
        .story-nav-button:hover {
            background: #00F5D4;
            color: #0D0221;
        }
        
        #story-card-indicator {
            font-family: 'Press Start 2P', cursive;
            font-size: 1.2rem;
            color: #fff;
        }
        
        .story-back-button {
            margin-top: 25px;
            width: 100%;
        }
        
        /* 
        ==================================================================
           ESTRUCTURA BASE DE LA PANTALLA DE JUEGO (SIN ESTILOS DE ERA)
        ==================================================================
        */
        
        .game-container { 
            width: 100%; 
            max-width: 480px; 
            height: 100vh; 
            display: flex; 
            flex-direction: column; 
            position: relative; 
            /* Todos los estilos de color, borde y sombra han sido eliminados */
        }
        
        /* --- Barra Superior del Juego --- */
        .top-bar { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            padding: 10px 15px; 
            flex-shrink: 0; 
            /* Estilos de era eliminados */
        }
        .resource-display {
        	font-family: 'Press Start 2P', cursive;
        	min-width: 0; 
            /* Estilos de era eliminados */
        }
        #money-display { 
            font-size: 1rem; 
            white-space: nowrap; 
            overflow: hidden; 
            text-overflow: ellipsis; 
            /* Estilos de era eliminados */
        }
        #dps-display { 
            font-size: 0.7rem; 
            margin-top: 5px; 
            /* Estilos de era eliminados */
        }
        .top-shortcut-bar { display: flex; align-items: center; gap: 15px; }
        .icon-button { background: transparent; border: none; cursor: pointer; padding: 0; display: flex; align-items: center; }
        
        /* --- Contenido de las Pesta√±as del Juego --- */
        .tab-content { flex: 1; overflow: hidden; position: relative; min-height: 0; }
        .tab-panel { 
            display: none; 
            padding: 15px; 
            height: 100%; 
            overflow-y: auto; 
            /* Estilos de era eliminados */
        }
        .tab-panel.active { display: flex; flex-direction: column; } 
        
        /* Pesta√±a Principal */
        .prestige-info-top { 
            text-align: center; 
            font-size: 1rem; 
            padding: 5px; 
            flex-shrink: 0; 
            /* Estilos de era eliminados */
        }
        .main-click-area { 
            flex-grow: 1; 
            display: flex; 
            justify-content: center; 
            align-items: center; 
            position: relative; 
        }
        .main-click-button { 
            width: 180px; 
            height: 180px; 
            border-radius: 50%; 
            color: white; 
            cursor: pointer; 
            display: flex; 
            flex-direction: column; 
            justify-content: center; 
            align-items: center; 
            transition: all 0.1s ease; 
            font-family: 'Press Start 2P', cursive; 
            font-size: 1.2rem; 
            /* Estilos de era eliminados */
        }
        .main-click-button:active { transform: scale(0.95); /* Estilos de era eliminados */ }
        .main-click-button .icon { font-size: 3rem; }
        .main-click-button small { font-size: 0.7rem; margin-top: 8px; font-family: 'VT323', monospace; /* Estilos de era eliminados */ }
        .terminal-header {
            font-family: 'VT323', monospace;
            padding: 8px 12px;
            border-radius: 4px;
            margin-bottom: 15px; 
            /* Estilos de era eliminados */
        }
        .terminal-header p {
            margin: 0;
            font-size: 1rem;
            line-height: 1.4;
        }
        .terminal-header .status-online {
            font-weight: bold;
            /* Estilos de era eliminados */
        }
        #main-tab {
            position: relative;
            overflow: hidden; 
        }
        
        /* El lienzo de nuestro fondo animado (SOLO ESTRUCTURA) */
        #main-tab-background {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 0; 
            /* Estilos de era (color, imagen, animaci√≥n) eliminados */
        }
        
        /* Efecto de l√≠neas de escaneo de monitor CRT antiguo (SOLO ESTRUCTURA) */
        #main-tab-background::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            /* Estilos de era (background-image, opacity) eliminados */
        }
        
        /* Definici√≥n de la animaci√≥n */
        @keyframes scroll-grid {
            from { background-position: 0 0; }
            to { background-position: 0 -200px; } 
        }
        
        /* Aseguramos que el contenido principal est√© por encima del fondo */
        .terminal-header, .prestige-info-top, .main-click-area {
            position: relative;
            z-index: 1;
        }
        
        /* Pesta√±a Mejoras */
        #upgrades-container {
            display: flex;
            flex-direction: column;
            gap: 6px; 
        }
        
        /* Contenedor Principal de la Mejora */
        .upgrade {
            display: grid; 
            grid-template-columns: auto 1fr auto; 
            align-items: center;
            gap: 12px; 
            /* Estilos de era eliminados */
            transition: background-color 0.2s ease;
        }
        .upgrade:hover {
            /* Estilos de era eliminados */
        }
        
        /* Icono (ya no necesita margen) */
        .upgrade-icon {
            font-size: 1.8rem;
            flex-shrink: 0; 
        }
        
        /* Secci√≥n de Informaci√≥n */
        .upgrade-info {
            min-width: 0; 
        }
        .upgrade-info h4 {
            margin: 0 0 2px 0;
            font-size: 1rem;
        }
        .upgrade-info p {
            margin: 0;
            font-size: 0.85rem;
            line-height: 1.2;
            /* Estilos de era eliminados */
        }
        
        /* Bot√≥n de Compra */
        .buy-button {
            padding: 10px 12px; 
            background-color: transparent;
            cursor: pointer;
            font-family: 'VT323', monospace; 
            font-size: 1rem; 
            text-align: center;
            transition: all 0.2s ease;
            flex-shrink: 0; 
            white-space: nowrap; 
            /* Estilos de era eliminados */
        }
        .buy-button:not(.is-disabled):hover {
            /* Estilos de era eliminados */
        }
        .buy-button.is-disabled {
            cursor: not-allowed;
            opacity: 0.6;
            /* Estilos de era eliminados */
        }
        
        /* Pesta√±a Evoluci√≥n */
        .evolution-content { text-align: center; padding-top: 20px; }
        .evolution-content h2 { font-family: 'Press Start 2P'; /* Estilos de era eliminados */ }
        .current-era { 
            padding: 20px; 
            margin: 30px 0; 
            /* Estilos de era eliminados */
        }
        .current-era h3 { margin-bottom: 10px; }
        .relaunch-button-styled { 
            padding: 15px; 
            background-color: transparent; 
            cursor: pointer; 
            font-family: 'Press Start 2P', cursive; 
            font-size: 1.2rem; 
            transition: all 0.2s ease; 
            /* Estilos de era eliminados */
        }
        .relaunch-button-styled:not(.is-disabled):hover { 
            /* Estilos de era eliminados */
        }
        .relaunch-button-styled.is-disabled { 
            cursor: not-allowed; 
            /* Estilos de era eliminados */
        }
        
        /* --- Pop-up "Pr√≥ximamente" --- */
        .coming-soon-panel {
            display: none; 
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            z-index: 101; 
        }
        .game-container.popup-visible .coming-soon-panel {
            display: block;
        }
        
        /* Opcional: Fondo oscuro para el pop-up */
        .game-container.popup-visible::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.7);
            z-index: 100;
        }
        
        /* --- Barra de Navegaci√≥n Inferior (NUEVO DISE√ëO) --- */
        .game-tab-bar { 
            display: grid; 
            grid-template-columns: 1fr auto 1fr; 
            position: relative; 
            height: 60px; 
            flex-shrink: 0; 
            /* Estilos de era eliminados */
        }
        .tab-btn { 
            background: transparent; 
            border: none; 
            padding: 5px; 
            cursor: pointer; 
            font-family: 'VT323'; 
            font-size: 0.9rem; 
            display: flex; 
            flex-direction: column; 
            align-items: center; 
            justify-content: center; 
            gap: 4px; 
            height: 100%; 
            /* Estilos de era eliminados */
        }
        .tab-btn.active { 
            /* Estilos de era eliminados */
        }
        
        /* ---- ANIMACIONES GEN√âRICAS (MANTENEMOS ESTAS) ---- */
        @keyframes fadeIn { from { opacity: 0; transform: scale(0.9); } to { opacity: 1; transform: scale(1); } }
        @keyframes fadeOut { from { opacity: 1; transform: scale(1); } to { opacity: 0; transform: scale(0.9); } }
        @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
        @keyframes blink { 0%, 100% { opacity: 1; } 50% { opacity: 0.3; } }
        @keyframes scroll-credits { from { top: 100%; } to { top: -100%; } }
        /* La animaci√≥n 'glow' se define en cada archivo de era, aqu√≠ la dejamos vac√≠a */
        @keyframes glow { 0% { box-shadow: none; } 100% { box-shadow: none; } }
        .can-afford-glow:not(.is-disabled) { /* La animaci√≥n se aplica en el CSS de era */ }
        
        
        /* --- Estilos para Categor√≠as de Mejoras (SOLO ESTRUCTURA) --- */
        .category-header {
            font-family: 'Press Start 2P', cursive;
            padding: 10px 5px;
            margin-top: 20px; 
            margin-bottom: 10px;
            font-size: 1.1rem;
            text-align: left; 
            /* Estilos de era eliminados */
        }
        
        .category-header:first-of-type {
            margin-top: 0; 
        }
        
        /* --- Estilos para Mejoras Bloqueadas por Requisitos (SOLO ESTRUCTURA) --- */
        .upgrade.is-locked {
        	opacity: 0.45;
            transition: opacity 0.3s ease, border-color 0.3s ease; 
            /* Estilos de era eliminados */
        }
        
        .upgrade.is-locked:hover {
            /* Estilos de era eliminados */
        }
        
        /* Opcional pero recomendado: a√±ade un icono de candado al t√≠tulo */
        .upgrade.is-locked .upgrade-info h4::after {
            content: ' üîí'; 
            font-size: 0.8rem;
            vertical-align: middle; 
        }
        
        /* --- Estilos para la Lista de Requisitos Visual (SOLO ESTRUCTURA) --- */
        .requirements-list {
            margin-top: 8px; 
            padding-top: 6px;
            /* Estilos de era eliminados */
            text-align: left;
        }
        
        .requirements-list p {
            font-size: 0.8rem; 
            margin: 2px 0;
            line-height: 1.3;
            /* Estilos de era eliminados */
        }
        
        /* Requisito NO cumplido: color rojo/peligro */
        .requirements-list p.unmet {
            /* Estilos de era eliminados */
        }
        
        /* Requisito S√ç cumplido: color verde/√©xito */
        .requirements-list p.met {
            /* Estilos de era eliminados */
        }
        
        /* Estilos para la informaci√≥n de requisitos (bloqueo activo o futuro) */
        .requirements-list.is-locked-info p.unmet {
            font-weight: bold; 
        }
        
        /* ---- CORRECCI√ìN DE USABILIDAD Y EST√âTICA (Elimina el molesto recuadro de enfoque) ---- */
        
        /* 1. Elimina el outline solo si el navegador soporta :focus-visible, 
              para reemplazarlo con un estilo personalizado. */
        button:focus,
        .buy-button:focus,
        .tab-btn:focus,
        .menu-button:focus {
            outline: none;
        }
        
        /* 2. [LA SOLUCI√ìN] Aplica un indicador de foco personalizado y visible 
              SOLO cuando se navega con el teclado (o cuando el navegador lo determina necesario). */
        button:focus-visible,
        .buy-button:focus-visible,
        .tab-btn:focus-visible,
        .menu-button:focus-visible {
            /* Este brillo amarillo es visible y tem√°tico, pero puedes cambiarlo a tu gusto */
            box-shadow: 0 0 8px 2px #FFFF00;
            /* Opcional: a√±ade una transici√≥n suave */
            transition: box-shadow 0.2s ease-in-out;
        }
        
        /* 3. Elimina el molesto 'highlight' azul/gris que aparece al tocar en m√≥viles (iOS/Android) */
        button,
        .main-click-button,
        .tab-btn,
        .shortcut-btn {
            /* Esta propiedad CSS previene que el navegador aplique un fondo de color al ser tocado */
            -webkit-tap-highlight-color: transparent;
            /* Para navegadores viejos o espec√≠ficos, aunque -webkit es el m√°s com√∫n */
            -moz-user-focus: none;
            -moz-user-select: none;
        }
        
        /* Animaciones */
        @keyframes flicker {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }
        
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        
        @keyframes fadeOut {
            from { opacity: 1; }
            to { opacity: 0; }
        }
        
        .fade-in {
            animation: fadeIn 1s ease-in-out forwards;
        }
        
        .fade-out {
            animation: fadeOut 1s ease-in-out forwards;
        }
        
        .flicker {
            animation: flicker 0.5s linear 3; /* Parpadea 3 veces */
        }
        
        /* ---- ESTILOS DEL SISTEMA DE TUTORIAL INTERACTIVO (V2) ---- */
        
        /* El contenedor principal para los paneles del overlay */
        #tutorial-overlay-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 9998;
            pointer-events: none; /* No bloquea clics por s√≠ mismo */
            opacity: 0;
            transition: opacity 0.3s ease-in-out;
        }
        
        #tutorial-overlay-container.visible {
            opacity: 1;
        }
        
        /* Estilo para cada uno de los 4 paneles que forman el overlay */
        .tutorial-overlay-panel {
            position: absolute;
            background-color: rgba(0, 0, 0, 0.8); /* Un poco m√°s oscuro */
            transition: all 0.3s ease-in-out; /* Animaci√≥n suave al cambiar de posici√≥n */
        }
        
        /* El elemento resaltado tendr√° este brillo */
        .tutorial-glow-effect {
            position: relative; /* Asegura que el z-index funcione */
            z-index: 9999;
            /* Aplicamos la animaci√≥n de brillo */
            animation: glow-tutorial 2s infinite;
            border-radius: 8px; /* Redondea las esquinas para que el brillo se vea mejor */
        }
        
        /* Definici√≥n de la animaci√≥n de brillo para el tutorial */
        @keyframes glow-tutorial {
            0% {
                box-shadow: 0 0 8px 3px rgba(255, 255, 255, 0.7);
            }
            50% {
                box-shadow: 0 0 16px 5px rgba(255, 255, 255, 0.9);
            }
            100% {
                box-shadow: 0 0 8px 3px rgba(255, 255, 255, 0.7);
            }
        }
        
        /* El cuadro de texto no necesita muchos cambios */
        #tutorial-tooltip {
            position: absolute;
            background-color: #020A02;
            border: 2px solid #00FF00;
            color: #fff;
            padding: 15px;
            border-radius: 5px;
            width: 90%;
            max-width: 300px;
            z-index: 10000;
            box-shadow: 0 5px 15px rgba(0,0,0,0.5);
            text-align: center;
            opacity: 0;
            transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;
            transform: translateY(20px);
            
            /* [LA SOLUCI√ìN] Por defecto, el tooltip es un "fantasma" que no puede ser clickeado. */
            pointer-events: none;
        }
        
        #tutorial-tooltip.visible {
            opacity: 1;
            transform: translateY(0);
        
            /* [LA SOLUCI√ìN] Solo cuando est√° VISIBLE, se vuelve "s√≥lido" y puede ser clickeado. */
            pointer-events: auto;
        }
        
        #tutorial-tooltip p {
            margin: 0 0 15px 0;
            font-size: 1.1rem;
            line-height: 1.5;
        }
        
        #tutorial-tooltip button {
            padding: 10px 20px;
            font-size: 1.1rem;
            background-color: #00FF00;
            color: #000;
            border: none;
            cursor: pointer;
            font-family: 'Press Start 2P', cursive;
            text-shadow: none;
        }
        
        /* ---- ESTILOS PARA NUEVAS PESTA√ëAS (Logros, Misiones, Tienda) ---- */
        
        .tab-panel h2 {
            /* Estilo para los t√≠tulos de las nuevas pesta√±as */
            font-family: 'Press Start 2P', cursive;
            text-align: center;
            padding-bottom: 15px;
            margin-bottom: 15px;
            flex-shrink: 0; /* Evita que el t√≠tulo se encoja */
        }
        
        .scrollable-content {
            /*
             * Esta es la clase clave para el contenido.
             * flex: 1; -> Hace que el div ocupe todo el espacio vertical restante en la pesta√±a.
             * overflow-y: auto; -> Muestra una barra de scroll vertical S√ìLO si el contenido es m√°s alto que el contenedor.
             */
            flex: 1;
            overflow-y: auto;
            min-height: 0; /* Truco de Flexbox para asegurar que el scroll funcione en todos los navegadores */
            padding: 5px;
        }
        
        .gem-display {
            /* Estilo base para el contador de gemas en la tienda */
            text-align: center;
            font-size: 1.1rem;
            padding: 10px;
            margin: 0 10px 20px 10px;
            font-family: 'Press Start 2P', cursive;
            flex-shrink: 0;
        }
        
        /* --- Estilos para Logros y Misiones (Estructura) --- */
        .achievement, .mission {
            display: flex;
            align-items: center;
            gap: 15px;
            padding: 10px;
            margin-bottom: 8px;
            opacity: 0.5; /* Los logros/misiones no completados se ver√°n atenuados */
            transition: all 0.3s ease;
        }
        
        .achievement.unlocked, .mission.completed {
            opacity: 1; /* Los completados ser√°n totalmente visibles */
        }
        
        .achievement-icon, .mission-icon {
            font-size: 2rem;
            flex-shrink: 0;
        }
        
        .achievement-info, .mission-info {
            flex-grow: 1;
        }
        
        .achievement-info h4, .mission-info h4 {
            margin: 0 0 5px 0;
            font-size: 1.1rem;
        }
        
        .achievement-info p, .mission-info p {
            margin: 0;
            font-size: 0.9rem;
        }
        
        .achievement-reward, .mission-reward {
            font-family: 'Press Start 2P', cursive;
            font-size: 1rem;
            white-space: nowrap;
        }
        
        /* --- Estilos para Fases de Misiones (Estructura) --- */
        .mission-phase-title {
            text-align: center;
            font-family: 'Press Start 2P', cursive;
            font-size: 1rem;
            padding: 10px;
            margin-bottom: 15px;
        }
        
        /* --- Estilos para la Tienda (Estructura) --- */
        .shop-item {
            display: flex;
            flex-direction: column;
            align-items: center;
            text-align: center;
            padding: 15px;
            margin-bottom: 10px;
        }
        .shop-item.purchased {
            opacity: 0.6;
        }
        .shop-item h4 {
            font-size: 1.1rem;
            margin: 0 0 8px 0;
        }
        .shop-item p {
            font-size: 0.9rem;
            margin: 0 0 12px 0;
            flex-grow: 1; /* Para que ocupe el espacio si los √≠tems tienen alturas distintas */
        }
        .buy-shop-item-button {
            padding: 10px 15px;
            font-size: 1rem;
            font-family: 'Press Start 2P', cursive;
            cursor: pointer;
            border: none;
            transition: all 0.2s ease;
        }
        .buy-shop-item-button:disabled {
            cursor: not-allowed;
        }
        
        /* ---- ESTILOS DEL SISTEMA DE NOTIFICACIONES ---- */
        #notification-container {
            position: fixed; /* Fijo en la pantalla */
            top: 20px;
            left: 50%;
            transform: translateX(-50%); /* Centrado horizontalmente */
            z-index: 10001; /* Por encima de todo, incluso del tutorial */
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 10px;
            pointer-events: none; /* No bloquea los clics en el juego que est√° debajo */
        }
        
        .notification {
            padding: 12px 20px;
            border-radius: 2px;
            display: flex;
            align-items: center;
            gap: 15px;
            min-width: 280px; /* Ancho m√≠nimo para que se vea bien */
            animation-duration: 0.5s;
            animation-fill-mode: forwards;
        }
        
        /* Animaciones de entrada y salida */
        @keyframes slideInDown {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        
        @keyframes fadeOutUp {
            from {
                opacity: 1;
                transform: translateY(0);
            }
            to {
                opacity: 0;
                transform: translateY(-30px);
            }
        }
        
        .slide-in-down {
            animation-name: slideInDown;
        }
        
        .fade-out-up {
            animation-name: fadeOutUp;
        }
        
        /*
        ==================================================================
           REGLAS DE DISE√ëO RESPONSIVO (PARA M√ìVILES)
        ==================================================================
        */
        
        /* Aplica estos estilos solo si el ancho de la pantalla es de 480px o menos */
        @media (max-width: 480px) {
            
            /* ---- AJUSTES PARA LA PANTALLA DE CR√âDITOS ---- */
            
            .credits-panel {
                /* Reducimos el padding para dar m√°s espacio al texto */
                padding: 10px;
            }
        
            #credits-content-container {
                /* Reducimos el tama√±o de la fuente para mejor lectura en m√≥vil */
                font-size: 16px; 
                padding: 10px;
            }
        
            /* Tambi√©n debemos ajustar la altura del cursor para que coincida con la nueva fuente */
            #credits-content-container .cursor {
                height: 1rem; /* 1rem ahora se adaptar√° al nuevo font-size de 16px */
            }
        }
        
        /* ---- ESTILOS PARA LA NUEVA PANTALLA DE OPCIONES ---- */
        .options-panel {
            display: flex;
            flex-direction: column;
            gap: 15px; /* Espacio entre grupos de opciones */
        }
        
        .options-header {
            font-family: 'Press Start 2P', cursive;
            color: #FF00FF; /* Fucsia */
            text-shadow: 0 0 5px #FF00FF;
            border-bottom: 2px solid #00AA00;
            padding-bottom: 8px;
            margin-top: 15px;
            margin-bottom: 5px;
            font-size: 1.2rem;
            text-align: left;
        }
        .options-panel > h3:first-of-type {
            margin-top: 0;
        }
        
        .option-item {
            font-size: 1.2rem;
        }
        
        /* Estilo para el interruptor (toggle switch) */
        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 60px;
            height: 34px;
        }
        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #555;
            transition: .4s;
            border-radius: 34px;
            border: 1px solid #aaa;
        }
        .slider:before {
            position: absolute;
            content: "";
            height: 26px;
            width: 26px;
            left: 4px;
            bottom: 3px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }
        input:checked + .slider {
            background-color: #00F5D4;
        }
        input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        /* Estilos para botones de Exportar/Importar */
        .data-buttons {
            display: flex;
            gap: 15px;
        }
        .data-button {
            flex: 1;
            padding: 10px;
            font-size: 1.1rem;
            background-color: #333;
            color: #fff;
            border: 2px solid #888;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        .data-button:hover {
            background-color: #555;
            border-color: #fff;
        }
        
        .options-panel .danger-button {
            width: 100%;
        }
        
        .options-back-button {
            margin-top: 20px;
            width: 100%;
        }
        
        /* ==================================================================
           NUEVOS ESTILOS PARA LA PANTALLA DE CARGA TEM√ÅTICA
        ================================================================== */
        
        /* Hacemos que la pantalla de carga se parezca a la terminal del juego */
        #loading-screen {
            background-color: #020A02; /* Mismo fondo que la era 1G */
            color: #00FF00; /* Mismo color de texto f√≥sforo */
            text-shadow: 0 0 5px rgba(0, 255, 0, 0.7);
            flex-direction: column; /* Alineamos los elementos verticalmente */
            font-family: 'VT323', monospace;
        }
        
        .loading-title {
            font-family: 'Press Start 2P', cursive;
            font-size: 2rem;
            color: #FF00A8; /* Color fucsia ic√≥nico */
            text-shadow: 0 0 10px #FF00A8, 0 0 5px #fff;
            margin-bottom: 40px;
        }
        
        .progress-bar-container {
            width: 80%;
            max-width: 400px;
            height: 30px;
            border: 2px solid #00AA00; /* Borde verde oscuro */
            background-color: #000;
            padding: 4px;
            margin-bottom: 20px;
        }
        
        .progress-bar-inner {
            width: 0%; /* Empezamos con la barra vac√≠a */
            height: 100%;
            background-color: #00FF00; /* La barra se llena de color f√≥sforo */
            box-shadow: 0 0 10px #00FF00;
            transition: width 0.3s ease-in-out; /* Animaci√≥n suave al llenarse */
        }
        
        .loading-status {
            font-size: 1.2rem;
            color: #FFFF00; /* Amarillo para el texto de estado */
            text-shadow: 0 0 5px #FFFF00;
        }
        
        /* Reutilizamos la animaci√≥n del cursor para el texto de estado */
        .loading-status::after {
            content: '_';
            animation: blink 1s linear infinite;
            margin-left: 5px;
        }
        
        #era-evolution-container {
            margin-bottom: 25px; /* A√±ade un espacio debajo del bot√≥n de evoluci√≥n */
        }
        
        #era-evolution-container p {
            color: #00FF00; /* Asegura que el texto final sea legible en la Era 1 */
            text-shadow: 0 0 5px #00FF00;
        }
        
        /* ==================================================================
           ESTILOS PARA LA TRANSICI√ìN DE ERA
        ================================================================== */
        
        .transition-overlay {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: #000; /* Fondo negro */
            opacity: 0;
            z-index: 9999; /* Por encima de todo */
            pointer-events: none; /* No debe interferir con los clics */
            transition: opacity 0.5s ease-in-out; /* Animaci√≥n suave */
        }
        
        .transition-overlay.active {
            opacity: 1;
            pointer-events: auto; /* Bloquea clics durante la transici√≥n */
        }
        
        /* ==================================================================
           ESTILOS PARA LA CINEM√ÅTICA DE TRANSICI√ìN DE ERA (V2)
        ================================================================== */
        
        #era-cinematic-screen {
            background-color: #000;
            justify-content: flex-start; /* Alineamos arriba para la terminal */
            align-items: flex-start;
            padding: 20px;
            font-family: 'VT323', monospace;
        }
        
        .cinematic-phase {
            width: 100%;
            height: 100%;
            position: absolute;
            top: 0;
            left: 0;
            display: flex;
            justify-content: center;
            align-items: center;
        }
        
        /* --- Estilos para el Acto 1: Apagado CRT --- */
        #cinematic-era1-shutdown {
            background-color: #020A02; /* Fondo de terminal Era 1 */
            color: #00FF00;
            text-shadow: 0 0 5px rgba(0, 255, 0, 0.7);
            font-size: 1.5rem;
            white-space: pre;
            justify-content: flex-start;
            align-items: flex-start;
            padding: 20px;
        }
        
        #cinematic-era1-shutdown .cursor {
            display: inline-block;
            background-color: #00FF00;
            width: 10px;
            height: 1.5rem;
            animation: blink 1s linear infinite;
            vertical-align: middle;
        }
        
        /* --- Estilos para el Acto 2: BIOS --- */
        #cinematic-bios {
            background-color: #000;
            color: #FFF;
            font-size: 1.3rem;
            white-space: pre;
            justify-content: flex-start;
            align-items: flex-start;
            padding: 20px;
        }
        
        /* --- Estilos para el Acto 3: Escritorio Win95 --- */
        #cinematic-desktop {
            background-size: cover;
            background-position: center;
        }
        
        #cinematic-welcome-box {
            background-color: #C0C0C0;
            color: #000;
            border: 2px solid;
            border-top-color: #FFFFFF;
            border-left-color: #FFFFFF;
            border-right-color: #808080;
            border-bottom-color: #808080;
            padding: 25px;
            width: 90%;
            max-width: 450px;
            text-align: center;
            box-shadow: 5px 5px 10px rgba(0,0,0,0.5);
            opacity: 0;
            transform: scale(0.9);
            transition: opacity 0.5s ease-out, transform 0.5s ease-out;
        }
        
        #cinematic-welcome-box.visible {
            opacity: 1;
            transform: scale(1);
        }
        
        #cinematic-welcome-box h2 {
            font-family: 'Press Start 2P', cursive;
            font-size: 1.5rem;
            color: #000080;
            margin-bottom: 20px;
        }
        
        #cinematic-welcome-box p {
            font-size: 1.2rem;
            line-height: 1.5;
        }
        
        /* ==================================================================
           ESTILOS PARA LA CINEM√ÅTICA DE INTRODUCCI√ìN (TERMINAL V2)
        ================================================================== */
        
        #intro-terminal-screen {
            background-color: #020A02; /* Fondo de terminal oscuro */
            color: #00FF00; /* Verde F√≥sforo Puro */
            font-family: 'VT323', monospace;
            font-size: 1.5rem;
            padding: 20px;
            justify-content: flex-start; /* Alinea el contenido arriba */
            align-items: flex-start; /* y a la izquierda */
            text-shadow: 0 0 5px rgba(0, 255, 0, 0.7);
            overflow: hidden; /* Oculta cualquier desbordamiento */
        }
        
        #intro-terminal-content {
            width: 100%;
            white-space: pre-wrap; /* Respeta los espacios y saltos de l√≠nea */
        }
        
        /* Estilo para la l√≠nea del prompt (ej. C:\>) */
        #intro-terminal-content .prompt {
            color: #FFFF00; /* Amarillo para destacar */
        }
        
        /* Estilo para el ASCII art */
        #intro-terminal-content .ascii-art {
            color: #00F5D4; /* Un cian brillante */
            text-shadow: 0 0 8px #00F5D4;
        }
        
        /* Estilo para los mensajes de estado */
        #intro-terminal-content .status-fail {
            color: #FF4136; /* Rojo para fallos */
        }
        #intro-terminal-content .status-success {
            color: #39CCCC; /* Cian para √©xito */
            font-weight: bold;
        }
        
        /* Reutilizamos el cursor que ya ten√≠amos */
        #intro-terminal-content .cursor {
            display: inline-block;
            background-color: #00FF00;
            width: 10px;
            height: 1.5rem;
            animation: blink 1s linear infinite;
            vertical-align: middle;
            margin-left: 2px;
        }
        
        /* Clase para el mensaje final interactivo */
        .final-prompt {
            margin-top: 40px;
            font-size: 1.8rem;
            text-align: center;
            width: 100%;
            animation: blink 1.5s linear infinite;
            cursor: pointer;
        }
        
        /* Estilos para el bot√≥n de omitir (re-a√±adidos) */
        #skip-intro-button {
            position: fixed; /* Lo fija en la esquina de la pantalla */
            bottom: 20px;
            right: 20px;
            background: transparent;
            border: 1px solid #00FF00;
            color: #00FF00;
            padding: 8px 15px;
            font-family: 'VT323', monospace;
            font-size: 1rem;
            cursor: pointer;
            z-index: 201; /* Asegura que est√© por encima de la pantalla de intro */
            opacity: 0.7;
            transition: opacity 0.3s;
        }
        
        #skip-intro-button:hover {
            opacity: 1;
        }
        ---------- FIN CONTENIDO ----------


        ========================================
        üìÅ Carpeta: ./css\eras/
        ========================================

            üìÑ Archivo: era-1g.css
            ---------- CONTENIDO ----------
            /* ==================================================================
               ESTILOS DE ERA: 1G - A√±os 80 (Terminal CRT F√≥sforo Verde)
               ================================================================== */
            
            /* 1. ESTILOS GLOBALES DE LA VENTANA DE JUEGO */
            .game-container { 
                background-color: #020A02; /* Fondo de pantalla de terminal oscuro */
                border: 5px solid #666; /* Borde grueso para simular el bisel del monitor */
                border-radius: 8px; 
                box-shadow: 
                    0 0 20px rgba(0, 255, 0, 0.3), /* Brillo externo */
                    0 0 10px rgba(0, 255, 0, 0.2) inset; /* Brillo interno */
                padding: 0;
            }
            
            /* Aplicamos el color de texto y la sombra de f√≥sforo a todo el contenido del juego */
            .game-container, .tab-panel {
                color: #00FF00; /* Verde F√≥sforo Puro */
                text-shadow: 0 0 3px rgba(0, 255, 0, 0.8), 0 0 8px rgba(0, 255, 0, 0.5);
            }
            
            
            /* 2. BARRA SUPERIOR */
            .top-bar { 
                display: flex;
                justify-content: space-between;
                align-items: center;
                padding: 8px 12px; /* Reducimos el padding para ser m√°s compactos */
                border-bottom: 2px solid #00AA00; /* Separador de l√≠nea verde */
                background-color: #000; /* Fondo negro puro para el panel */
                flex-shrink: 0; 
                color: #00FF00; /* Color de texto base: F√≥sforo Verde */
                text-shadow: 0 0 3px rgba(0, 255, 0, 0.8); /* Sombra de f√≥sforo */
                font-family: 'VT323', monospace; /* Fuente monoespacio para mejor legibilidad de n√∫meros */
            }
            
            /* Contenedores de Recurso */
            .resource-display {
            	/* Quitamos el Press Start 2P y usamos VT323 para ser m√°s legible en la barra */
            	font-family: 'VT323', monospace; 
            	min-width: 0;
            }
            
            /* Display de Dinero (Capital) */
            #money-display { 
                font-size: 1.2rem; /* Ligeramente m√°s grande para que el n√∫mero destaque */
                color: #00FF00; /* Verde F√≥sforo Puro */
                text-shadow: 0 0 8px #00FF00; /* M√°s brillo para el recurso principal */
                font-weight: bold; /* El texto no tiene font-weight, pero la sombra lo simula */
            }
            
            /* Display de DPS (Flujo de Red) */
            #dps-display { 
                font-size: 0.8rem; 
                margin-top: 2px;
                color: #FFFF00; /* Amarillo para el flujo de red (acci√≥n/alerta sutil) */
                text-shadow: 0 0 5px #FFFF00; 
            }
            
            /* Barra de Atajos (Accesos a Tienda, Logros, etc.) */
            .top-shortcut-bar { 
                display: flex; 
                align-items: center; 
                gap: 10px; /* Reducimos el espacio entre los botones */
            }
            
            
            /* 3. PESTA√ëA PRINCIPAL */
            /* Fondo Animado (CRT Grid) */
            #main-tab-background {
                background-color: #020A02;
                background-image:
                    radial-gradient(circle at center, rgba(0, 255, 0, 0.2) 0%, transparent 60%),
                    linear-gradient(to right, rgba(0, 255, 0, 0.1) 1px, transparent 1px),
                    linear-gradient(to bottom, rgba(0, 255, 0, 0.1) 1px, transparent 1px);
                background-size: 1px 40px, 40px 1px, 40px 40px; 
            }
            /* Efecto de l√≠neas de escaneo */
            #main-tab-background::after {
                background-image: linear-gradient(to bottom, rgba(0, 0, 0, 0.5) 50%, transparent 50%); 
                background-size: 100% 4px;
                opacity: 0.3;
            }
            .terminal-header {
                background-color: #000;
                color: #00FF00;
                border: 1px solid #00AA00; 
                text-shadow: 0 0 5px #00FF00;
            }
            .terminal-header .status-online {
                color: #FFFF00; /* Amarillo para el estatus online */
                text-shadow: 0 0 5px #FFFF00;
            }
            .prestige-info-top { 
                color: #FF00FF; /* Fucsia para el prestigio */
                text-shadow: 0 0 5px #FF00FF; 
            }
            /* Bot√≥n Principal (El N√∫cleo CRT) */
            .main-click-button { 
                width: 200px; 
                height: 200px;
                background: radial-gradient(circle, #00FF00, #008800); 
                border: 5px solid #00FF00; 
                box-shadow: 0 0 30px #00FF00, inset 0 0 15px rgba(255, 255, 255, 0.5); 
            }
            .main-click-button:active { box-shadow: 0 0 5px #00FF00; }
            .main-click-button small { color: #FFFF00; }
            
            
            /* 4. PESTA√ëA MEJORAS */
            
            /* Encabezados de Categor√≠a */
            .category-header {
                color: #FF00FF; /* Fucsia */
                text-shadow: 0 0 5px #FF00FF;
                border-bottom: 2px solid #00AA00; /* L√≠nea separadora verde */
            }
            /* Contenedor de Mejora (Tarjeta de Circuito) */
            .upgrade {
                padding: 5px 8px; 
                grid-template-columns: auto 1fr 105px; 
                align-items: center;
                gap: 8px; /* Espacio reducido */
                
                background-color: rgba(0, 100, 0, 0.1); 
                border: 1px solid #00AA00; 
                border-radius: 0;
                box-shadow: 0 0 5px rgba(0, 255, 0, 0.1); 
            }
            .upgrade:hover {
                background-color: rgba(0, 100, 0, 0.3);
            }
            
            /* Icono */
            .upgrade-icon {
                font-size: 1.4rem; /* Reducci√≥n ligera del tama√±o de icono */
            }
            
            /* Secci√≥n de Informaci√≥n */
            .upgrade-info h4 {
                margin: 0 0 1px 0; /* Espacio muy reducido despu√©s del t√≠tulo */
                font-size: 1.05rem; /* Fuente del t√≠tulo un poco m√°s compacta */
                line-height: 1.1;
            }
            .upgrade-info p {
                color: #99FF99; 
                font-size: 0.8rem; /* Fuente de la descripci√≥n m√°s peque√±a */
                line-height: 1.2;
            }
            
            /* Bot√≥n de Compra */
            .buy-button {
                padding: 8px 5px; /* Padding muy reducido */
                font-size: 0.65rem; /* Fuente m√°s peque√±a */
                
                color: #FFFF00; 
                border: 2px solid #FFFF00;
                border-radius: 0;
                font-family: 'Press Start 2P', cursive;
                text-shadow: 0 0 5px #FFFF00; 
            }
            /* Estilo para el texto de la ganancia */
            .upgrade-gain {
                display: block; /* Lo coloca en una nueva l√≠nea para mayor claridad */
                margin-top: 5px; /* A√±ade un peque√±o espacio sobre √©l */
                color: #FFFF00; /* Color amarillo, como el del DPS, para indicar ganancia */
                text-shadow: 0 0 4px #FFFF00;
                font-size: 0.9rem;
            }
            .buy-button:not(.is-disabled):hover {
                background-color: #FFFF00;
                color: #000;
                box-shadow: 0 0 15px #FFFF00;
            }
            .buy-button.is-disabled {
                border-color: #666; 
                color: #666;
                text-shadow: none;
            }
            
            /* Mejoras Bloqueadas (Mantenemos los estilos de era) */
            .upgrade.is-locked {
                border-color: #003300; 
                background-color: rgba(0, 0, 0, 0.5); 
            }
            /* Requisitos Visuales */
            .requirements-list {
                margin-top: 5px; /* Espacio reducido */
                padding-top: 4px; /* Padding reducido */
                border-top: 1px dashed rgba(0, 255, 0, 0.3);
            }
            .requirements-list p.unmet {
                color: #FF0000; 
                text-shadow: 0 0 3px #FF0000;
            }
            .requirements-list p.met {
                color: #00FF00; 
                text-shadow: 0 0 3px #00FF00;
            }
            
            #evolution-tab .requirements-list p.unmet {
                color: #FF0000; /* Rojo */
                text-shadow: 0 0 3px #FF0000;
            }
            #evolution-tab .requirements-list p.met {
                color: #00FF00; /* Verde */
                text-shadow: 0 0 3px #00FF00;
            }
            
            
            /* 5. PESTA√ëA EVOLUCI√ìN */
            .evolution-content h2 { 
                color: #FF00FF; 
                text-shadow: 0 0 5px #FF00FF; 
            }
            .current-era { 
                background: rgba(0,0,0,0.5); 
                border: 1px solid #FF00FF; 
                color: #00FF00;
                text-shadow: 0 0 3px rgba(0, 255, 0, 0.8);
            }
            /* Bot√≥n Relanzar (Prestigio) */
            .relaunch-button-styled { 
                color: #FF00FF; 
                border: 3px solid #FF00FF; 
                border-radius: 0; 
                text-shadow: 0 0 10px #FF00FF;
            }
            .relaunch-button-styled:not(.is-disabled):hover { 
                background-color: #FF00FF; 
                color: #000; 
                box-shadow: 0 0 20px #FF00FF; 
            }
            .relaunch-button-styled.is-disabled { 
                border-color: #444; 
                color: #444; 
                text-shadow: none;
            }
            
            
            /* 6. BARRA DE NAVEGACI√ìN INFERIOR */
            .game-tab-bar { 
                border-top: 3px solid #00FF00; 
                height: 70px;
                background-color: #1A1A1A; /* Panel oscuro */
            }
            .tab-btn { 
                background: #252525; /* Fondo de tecla */
                border-right: 1px solid #00AA00; 
                color: #00FF00; 
                font-family: 'Press Start 2P', cursive; 
                font-size: 0.8rem; 
                text-shadow: 0 0 3px rgba(0, 255, 0, 0.5);
            }
            .tab-btn:hover:not(.active) {
                background: #303030;
                color: #FFFF00;
                text-shadow: 0 0 5px #FFFF00;
            }
            .tab-btn.active { 
                background: #00FF00; 
                color: #000; 
                text-shadow: none;
            }
            .tab-btn:first-child { border-left: none; }
            .tab-btn:last-child { border-right: none; }
            
            
            /* 7. ANIMACIONES DE RESPLANDOR (ESPEC√çFICAS DE LA ERA) */
            @keyframes glow {
                0% {
                    box-shadow: 0 0 5px #FFFF00, 0 0 10px #FFFF00 inset;
                }
                50% {
                    box-shadow: 0 0 15px #FFFF00, 0 0 20px #FFFF00 inset;
                }
                100% {
                    box-shadow: 0 0 5px #FFFF00, 0 0 10px #FFFF00 inset;
                }
            }
            .can-afford-glow:not(.is-disabled) { animation: glow 2s infinite; }
            
            /* Animaci√≥n espec√≠fica para el bot√≥n de prestigio (Fucsia) */
            @keyframes glow-prestige {
                0% {
                    box-shadow: 0 0 5px #FF00FF, 0 0 10px #FF00FF inset;
                }
                50% {
                    box-shadow: 0 0 15px #FF00FF, 0 0 20px #FF00FF inset;
                }
                100% {
                    box-shadow: 0 0 5px #FF00FF, 0 0 10px #FF00FF inset;
                }
            }
            .relaunch-button-styled.can-afford-glow { animation: glow-prestige 2s infinite; }
            
            /* 8. ESTILOS DE ATAJO (SHORTCUTS) - MOVIDOS DE icons.css */
            
            .top-shortcut-bar .shortcut-btn i {
                background: #1A1A1A; /* Fondo de panel oscuro */
                border: 1px solid #00AA00; /* Borde de verde intermedio */
                color: #FFFF00; /* Color de icono: Amarillo F√≥sforo para acci√≥n */
                text-shadow: 0 0 5px #FFFF00;
            }
            
            .top-shortcut-bar .shortcut-btn:hover i {
                background-color: #00FF00; /* Fondo activo en verde puro */
                color: #000; /* Texto oscuro en fondo brillante */
                box-shadow: 0 0 10px #00FF00;
                text-shadow: none;
            }
            
            /* ---- ESTILOS DE ERA PARA NUEVAS PESTA√ëAS ---- */
            
            .tab-panel h2 {
                color: #FF00FF; /* Fucsia, igual que los t√≠tulos de Evoluci√≥n y categor√≠as */
                text-shadow: 0 0 5px #FF00FF;
                border-bottom: 2px solid #00AA00; /* L√≠nea separadora verde */
            }
            
            /* Para darle un borde tem√°tico al contador de gemas */
            .gem-display {
                color: #FFFF00; /* Amarillo para destacar, como el DPS */
                text-shadow: 0 0 5px #FFFF00;
                border: 1px dashed #FFFF00;
                background-color: rgba(0, 0, 0, 0.3); /* Fondo oscuro semitransparente */
            }
            
            /* Ocultar la barra de scroll por defecto y darle un estilo retro si aparece */
            .scrollable-content::-webkit-scrollbar {
              width: 8px;
            }
            .scrollable-content::-webkit-scrollbar-track {
              background: #000;
            }
            .scrollable-content::-webkit-scrollbar-thumb {
              background-color: #00FF00;
              border: 1px solid #000;
            }
            
            /* --- Estilos de Era para Logros y Misiones --- */
            .achievement, .mission {
                background-color: rgba(0, 0, 0, 0.4);
                border: 1px solid #003300; /* Borde verde muy oscuro */
            }
            
            .achievement.unlocked {
                background-color: rgba(0, 100, 0, 0.2);
                border-color: #00AA00; /* Borde verde m√°s brillante */
                box-shadow: 0 0 5px rgba(0, 255, 0, 0.2);
            }
            
            .achievement-info h4, .mission-info h4 {
                color: #00FF00; /* Verde f√≥sforo */
            }
            
            .achievement-info p, .mission-info p {
                color: #99FF99; /* Verde m√°s suave para la descripci√≥n */
            }
            
            .achievement-reward, .mission-reward {
                color: #FFFF00; /* Amarillo para la recompensa, igual que el DPS */
                text-shadow: 0 0 5px #FFFF00;
            }
            
            /* --- Estilos de Era para Fases de Misiones --- */
            .mission-phase-title {
                color: #FF00FF; /* Fucsia, como otros t√≠tulos importantes */
                text-shadow: 0 0 5px #FF00FF;
                border: 1px dashed #FF00FF;
                background-color: rgba(0, 0, 0, 0.3);
            }
            
            /* Peque√±o ajuste para que las misiones completadas se vean diferentes */
            .mission.completed {
                opacity: 0.5;
                border-style: dashed;
                border-color: #00AA00;
            }
            
            /* --- Estilos de Era para la Tienda --- */
            .shop-item {
                background-color: rgba(0, 0, 0, 0.4);
                border: 1px solid #00AA00;
            }
            .shop-item.purchased {
                border-style: dashed;
                border-color: #444;
            }
            .shop-item h4 {
                color: #00FF00;
            }
            .shop-item p {
                color: #99FF99;
            }
            .buy-shop-item-button {
                background-color: transparent;
                border: 2px solid #FFFF00;
                color: #FFFF00;
                text-shadow: 0 0 5px #FFFF00;
            }
            .buy-shop-item-button:not(:disabled):hover {
                background-color: #FFFF00;
                color: #000;
                text-shadow: none;
                box-shadow: 0 0 15px #FFFF00;
            }
            .buy-shop-item-button:disabled {
                border-color: #666;
                color: #666;
                text-shadow: none;
                opacity: 0.7;
            }
            .shop-item.purchased .buy-shop-item-button {
                border-color: #00FF00;
                color: #00FF00;
                text-shadow: 0 0 5px #00FF00;
            }
            
            /* --- Estilos de Era para Notificaciones --- */
            .notification {
                background-color: rgba(0, 0, 0, 0.85);
                border: 2px solid #FFFF00; /* Borde amarillo para llamar la atenci√≥n */
                box-shadow: 0 0 10px #FFFF00;
                color: #fff;
                font-family: 'VT323', monospace;
                font-size: 1.1rem;
            }
            
            .notification-icon {
                font-size: 1.5rem;
            }
            
            .notification-text h5 {
                font-family: 'Press Start 2P', cursive;
                font-size: 0.9rem;
                color: #00FF00; /* Verde para el t√≠tulo */
                margin: 0 0 5px 0;
                text-shadow: 0 0 3px #00FF00;
            }
            
            .notification-text p {
                margin: 0;
                color: #FFFF00; /* Amarillo para la recompensa */
                text-shadow: 0 0 5px #FFFF00;
            }
            ---------- FIN CONTENIDO ----------

            üìÑ Archivo: era-2g.css
            ---------- CONTENIDO ----------
            /* ==================================================================
               ESTILOS DE ERA: 2G - A√±os 90 (Est√©tica Windows 95 / Web 1.0)
               ================================================================== */
            
            /* 1. ESTILOS GLOBALES DE LA VENTANA DE JUEGO */
            .game-container { 
                background-color: #C0C0C0; /* Gris cl√°sico de Windows */
                border: 2px solid;
                border-top-color: #FFFFFF;
                border-left-color: #FFFFFF;
                border-right-color: #808080;
                border-bottom-color: #808080;
                border-radius: 0; 
                box-shadow: 2px 2px 2px #000;
                padding: 3px;
            }
            
            /* Aplicamos la fuente y el color de texto base */
            .game-container, .tab-panel {
                color: #000; /* Texto negro */
                text-shadow: none; /* Sin sombra de f√≥sforo */
            }
            
            
            /* 2. BARRA SUPERIOR */
            .top-bar { 
                padding: 4px 8px;
                border-bottom: 2px solid #808080;
                background-color: #000080; /* Azul oscuro de barra de t√≠tulo */
                flex-shrink: 0; 
                color: #fff; /* Texto blanco */
                text-shadow: 1px 1px 0 #000;
                font-family: 'VT323', monospace;
            }
            
            .resource-display {
            	font-family: 'VT323', monospace; 
            	min-width: 0;
            }
            
            #money-display { 
                font-size: 1.2rem;
                color: #fff;
                text-shadow: 1px 1px 0 #000;
            }
            
            #dps-display { 
                font-size: 0.8rem; 
                margin-top: 2px;
                color: #C0C0C0; /* Texto gris claro sobre azul */
                text-shadow: 1px 1px 0 #000;
            }
            
            
            /* 3. PESTA√ëA PRINCIPAL */
            /* Fondo de escritorio 'Teal' cl√°sico de Windows */
            #main-tab-background {
                background-color: #008080;
                background-image: none; /* Quitamos el grid CRT */
            }
            #main-tab-background::after {
                background-image: none; /* Quitamos las scanlines */
            }
            .terminal-header {
                background-color: #E0E0E0;
                color: #000;
                border: 1px solid #808080; 
                text-shadow: none;
            }
            .terminal-header .status-online {
                color: #008000; /* Verde oscuro */
                text-shadow: none;
            }
            .prestige-info-top { 
                color: #800080; /* P√∫rpura */
                text-shadow: 1px 1px #fff; 
            }
            /* Bot√≥n principal como un icono de escritorio */
            .main-click-button { 
                width: 180px; 
                height: 180px;
                background: #C0C0C0; 
                border: 2px solid;
                border-top-color: #fff;
                border-left-color: #fff;
                border-right-color: #808080;
                border-bottom-color: #808080;
                box-shadow: none;
                border-radius: 8px;
            }
            .main-click-button:active { 
                border-color: #808080;
                border-right-color: #fff;
                border-bottom-color: #fff;
            }
            .main-click-button small { color: #000080; }
            
            
            /* 4. PESTA√ëA MEJORAS */
            .category-header {
                color: #000080;
                text-shadow: none;
                border-bottom: 2px solid #808080;
            }
            /* Estilo de lista de Windows */
            .upgrade {
                padding: 8px; 
                grid-template-columns: auto 1fr 105px; 
                gap: 12px;
                background-color: #fff; 
                border: 1px solid #808080;
                box-shadow: none;
                border-radius: 0;
            }
            .upgrade:hover {
                background-color: #000080;
                color: #fff; /* El texto se vuelve blanco al hacer hover */
            }
            .upgrade.is-locked:hover {
                background-color: #F0F0F0; /* Mantenemos el color de fondo gris claro de 'is-locked' */
                color: #000; /* Mantenemos el color de texto negro */
            }
            .upgrade:hover p {
                color: #C0C0C0; /* La descripci√≥n se vuelve gris claro */
            }
            .upgrade:hover .upgrade-gain {
                color: #FFFF00; /* Mantenemos el amarillo para la ganancia */
            }
            .upgrade-info p {
                color: #555; 
                font-size: 0.85rem;
            }
            /* Bot√≥n estilo Windows 95 */
            .buy-button {
                padding: 8px 5px;
                font-size: 0.9rem;
                color: #000; 
                background-color: #C0C0C0;
                border: 2px solid;
                border-top-color: #fff;
                border-left-color: #fff;
                border-right-color: #808080;
                border-bottom-color: #808080;
                font-family: 'VT323', monospace;
                text-shadow: none;
            }
            .buy-button:not(.is-disabled):hover {
                background-color: #DDD;
            }
            .buy-button.is-disabled {
                color: #808080;
                text-shadow: 1px 1px #fff; /* Efecto de texto deshabilitado */
                border-color: #C0C0C0; /* Borde plano */
            }
            .buy-button:active:not(.is-disabled) {
                border-top-color: #808080;
                border-left-color: #808080;
                border-right-color: #fff;
                border-bottom-color: #fff;
            }
            .upgrade-gain {
                color: #000080;
                text-shadow: none;
            }
            .upgrade.is-locked {
                border-color: #DDD; 
                background-color: #F0F0F0;
                opacity: 0.6;
            }
            .requirements-list p.unmet {
                color: #8B0000; /* Rojo oscuro */
                text-shadow: none;
            }
            .requirements-list p.met {
                color: #006400; /* Verde oscuro */
                text-shadow: none;
            }
            
            
            /* 5. PESTA√ëA EVOLUCI√ìN */
            .evolution-content h2 { 
                color: #000080; 
                text-shadow: none; 
            }
            .current-era { 
                background: #fff; 
                border: 1px solid #808080; 
                color: #000;
                text-shadow: none;
            }
            /* Bot√≥n de Prestigio y Evoluci√≥n */
            .relaunch-button-styled { 
                color: #000; 
                background-color: #C0C0C0;
                border: 2px solid;
                border-top-color: #fff;
                border-left-color: #fff;
                border-right-color: #808080;
                border-bottom-color: #808080;
                border-radius: 0; 
                text-shadow: none;
            }
            .relaunch-button-styled:not(.is-disabled):hover { 
                background-color: #DDD; 
                color: #000; 
                box-shadow: none; 
            }
            .relaunch-button-styled.is-disabled { 
                color: #808080;
                text-shadow: 1px 1px #fff;
                border-color: #C0C0C0;
            }
            .relaunch-button-styled:active:not(.is-disabled) {
                border-top-color: #808080;
                border-left-color: #808080;
                border-right-color: #fff;
                border-bottom-color: #fff;
            }
            
            
            /* 6. BARRA DE NAVEGACI√ìN INFERIOR */
            .game-tab-bar { 
                border-top: 2px solid #fff; 
                height: 60px;
                background-color: #C0C0C0;
            }
            .tab-btn { 
                background: transparent;
                border: none;
                color: #000; 
                font-family: 'VT323', cursive; 
                font-size: 0.9rem; 
                text-shadow: none;
                border-top: 2px solid transparent; /* Espacio para el borde activo */
            }
            .tab-btn:hover:not(.active) {
                background: #DDD;
            }
            .tab-btn.active { 
                font-weight: bold;
                border-top: 2px solid #000080;
            }
            
            
            /* 7. ANIMACIONES DE RESPLANDOR (ESPEC√çFICAS DE LA ERA) */
            /* El brillo ahora es un borde exterior, m√°s sutil */
            @keyframes glow {
                0%, 100% {
                    outline: 2px solid #000080;
                    outline-offset: 2px;
                }
                50% {
                    outline: 2px solid transparent;
                    outline-offset: 2px;
                }
            }
            .can-afford-glow:not(.is-disabled) { animation: glow 1.5s infinite; }
            
            @keyframes glow-prestige {
                0%, 100% {
                    outline: 2px solid #800080;
                    outline-offset: 2px;
                }
                50% {
                    outline: 2px solid transparent;
                    outline-offset: 2px;
                }
            }
            .relaunch-button-styled.can-afford-glow { animation: glow-prestige 1.5s infinite; }
            
            
            /* 8. ESTILOS DE ATAJO, PESTA√ëAS Y NOTIFICACIONES */
            .top-shortcut-bar .shortcut-btn i {
                background: #C0C0C0;
                border: 1px solid #808080;
                color: #000;
                text-shadow: none;
            }
            .top-shortcut-bar .shortcut-btn:hover i {
                background-color: #DDD;
                box-shadow: none;
            }
            .tab-panel h2 {
                color: #000080;
                text-shadow: none;
                border-bottom: 2px solid #808080;
            }
            .gem-display {
                color: #800080;
                text-shadow: none;
                border: 1px solid #808080;
                background-color: #fff;
            }
            .scrollable-content::-webkit-scrollbar {
                width: 16px;
            }
            .scrollable-content::-webkit-scrollbar-track {
                background: #C0C0C0;
                border: 1px solid #808080;
            }
            .scrollable-content::-webkit-scrollbar-thumb {
                background-color: #C0C0C0;
                border: 2px solid;
                border-top-color: #fff;
                border-left-color: #fff;
                border-right-color: #808080;
                border-bottom-color: #808080;
            }
            .achievement, .mission, .shop-item {
                background-color: #fff;
                border: 1px solid #808080;
                box-shadow: 1px 1px 0px #808080;
            }
            .achievement.unlocked, .mission.completed, .shop-item.purchased {
                opacity: 0.7;
            }
            .achievement-info h4, .mission-info h4, .shop-item h4 {
                color: #000;
            }
            .achievement-info p, .mission-info p, .shop-item p {
                color: #333;
            }
            .achievement-reward, .mission-reward {
                color: #000080;
                text-shadow: none;
            }
            .mission-phase-title {
                color: #000080;
                text-shadow: none;
                border: 1px dashed #000080;
                background-color: #fff;
            }
            .buy-shop-item-button,
            .shop-item.purchased .buy-shop-item-button {
                background-color: #C0C0C0;
                border: 2px solid;
                border-top-color: #fff;
                border-left-color: #fff;
                border-right-color: #808080;
                border-bottom-color: #808080;
                color: #000;
                text-shadow: none;
            }
            .buy-shop-item-button:not(:disabled):hover {
                background-color: #DDD;
                box-shadow: none;
            }
            .buy-shop-item-button:disabled {
                color: #808080;
                text-shadow: 1px 1px #fff;
                border-color: #C0C0C0;
            }
            .notification {
                background-color: #C0C0C0;
                border: 2px solid;
                border-top-color: #fff;
                border-left-color: #fff;
                border-right-color: #808080;
                border-bottom-color: #808080;
                box-shadow: 2px 2px 2px #000;
                color: #000;
                font-size: 1.1rem;
            }
            .notification-text h5 {
                font-size: 0.9rem;
                color: #000080;
                margin: 0 0 5px 0;
                text-shadow: none;
            }
            .notification-text p {
                margin: 0;
                color: #000;
                text-shadow: none;
            }
            
            /* ==================================================================
               ESTILOS DE ERA 2: POP-UPS INTERACTIVOS
               ================================================================== */
            
            #popup-container {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                z-index: 1000;
                /* La animaci√≥n de aparici√≥n se controlar√° con JS */
            }
            
            .popup-banner {
                width: 280px;
                background-color: #C0C0C0;
                border: 2px solid;
                border-top-color: #FFFFFF;
                border-left-color: #FFFFFF;
                border-right-color: #808080;
                border-bottom-color: #808080;
                box-shadow: 3px 3px 5px rgba(0,0,0,0.4);
                font-family: 'VT323', monospace;
                cursor: pointer;
                animation: popup-fade-in 0.3s ease-out;
            }
            
            .popup-title-bar {
                background-color: #000080; /* Azul oscuro de Windows */
                color: #fff;
                padding: 4px 8px;
                font-weight: bold;
                text-shadow: 1px 1px #000;
            }
            
            .popup-content {
                padding: 15px;
                text-align: center;
                color: #000;
            }
            .popup-content p {
                margin: 0 0 10px 0;
                font-size: 1.2rem;
            }
            
            .popup-button {
                padding: 8px 15px;
                font-family: 'VT323', monospace;
                font-size: 1.1rem;
                color: #000;
                background-color: #C0C0C0;
                border: 2px solid;
                border-top-color: #fff;
                border-left-color: #fff;
                border-right-color: #808080;
                border-bottom-color: #808080;
                cursor: pointer;
                box-shadow: 1px 1px 1px #000;
            }
            .popup-button:active {
                border-top-color: #808080;
                border-left-color: #808080;
                border-right-color: #fff;
                border-bottom-color: #fff;
                box-shadow: none;
            }
            
            /* --- Estilos espec√≠ficos para cada banner --- */
            
            /* 1. Jackpot Banner */
            .jackpot-counter {
                display: flex;
                justify-content: center;
                gap: 2px;
                margin-bottom: 15px;
            }
            .jackpot-counter span {
                background: #000;
                color: #fff;
                padding: 5px 8px;
                font-size: 1.8rem;
                border: 1px solid #808080;
                animation: jackpot-scroll 0.2s linear infinite;
            }
            /* Le da un peque√±o desfase a cada n√∫mero para que no se muevan todos a la vez */
            .jackpot-counter span:nth-child(2) { animation-delay: -0.05s; }
            .jackpot-counter span:nth-child(3) { animation-delay: -0.1s; }
            .jackpot-counter span:nth-child(5) { animation-delay: -0.15s; }
            /* etc... */
            
            .jackpot-banner .popup-button {
                animation: blink-effect 1s step-end infinite;
            }
            
            
            /* 2. Frenzy Banner */
            .frenzy-progress-bar {
                width: 100%;
                height: 20px;
                background-color: #fff;
                border: 1px solid #808080;
                padding: 2px;
                margin-bottom: 15px;
            }
            .frenzy-progress-bar-inner {
                width: 100%;
                height: 100%;
                background-color: #000080;
                animation: fill-bar 1.5s ease-out forwards;
            }
            
            /* 3. Overload Banner */
            .overload-graph {
                display: flex;
                justify-content: space-around;
                align-items: flex-end;
                height: 60px;
                border: 2px solid #808080;
                padding: 5px;
                margin-bottom: 15px;
                background-color: #fff;
            }
            .graph-bar {
                width: 15%;
                background-color: #008080; /* Teal de Windows */
                animation: rise-up 0.8s ease-out forwards;
            }
            
            /* --- Animaciones --- */
            @keyframes popup-fade-in {
                from { opacity: 0; transform: scale(0.8); }
                to { opacity: 1; transform: scale(1); }
            }
            
            @keyframes blink-effect {
                50% { background-color: #FFFF00; color: #000; }
            }
            
            @keyframes jackpot-scroll {
                from { transform: translateY(-5px); }
                to { transform: translateY(5px); }
            }
            
            @keyframes fill-bar {
                from { width: 0%; }
                to { width: 100%; }
            }
            
            @keyframes rise-up {
                from { height: 0%; }
                /* La altura final la define el inline style en el HTML */
            }
            
            /* ==================================================================
               ESTILOS DE ERA 2: ICONOS DE BUFFS ACTIVOS
               ================================================================== */
            
            #active-buffs-container {
                display: flex;
                gap: 10px;
                position: absolute; /* Lo sacamos del flujo normal */
                left: 15px; /* Lo alineamos con el padding de la top-bar */
                top: 60px;  /* Lo posicionamos justo debajo de la top-bar */
            }
            
            .buff-icon {
                position: relative;
                width: 40px;
                height: 40px;
                background-color: #C0C0C0;
                border: 2px solid;
                border-top-color: #fff;
                border-left-color: #fff;
                border-right-color: #808080;
                border-bottom-color: #808080;
                box-shadow: 2px 2px 2px rgba(0,0,0,0.3);
                animation: popup-fade-in 0.3s; /* Reutilizamos la animaci√≥n */
            }
            
            .buff-icon-emoji {
                position: absolute;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                font-size: 20px;
            }
            
            .buff-icon svg {
                width: 100%;
                height: 100%;
                transform: rotate(-90deg); /* Para que el progreso empiece desde arriba */
            }
            
            .progress-ring-bg {
                fill: none;
                stroke: #808080; /* Gris oscuro para el fondo del c√≠rculo */
                stroke-width: 3.8;
            }
            
            .progress-ring-fg {
                fill: none;
                stroke: #000080; /* Azul de Windows para la barra de progreso */
                stroke-width: 3.8;
                stroke-linecap: round;
                transition: stroke-dasharray 0.1s linear; /* Animaci√≥n suave al actualizar */
            }
            ---------- FIN CONTENIDO ----------

            üìÑ Archivo: era-3g.css
            ---------- CONTENIDO ----------

            ---------- FIN CONTENIDO ----------

            üìÑ Archivo: era-4g.css
            ---------- CONTENIDO ----------

            ---------- FIN CONTENIDO ----------

            üìÑ Archivo: era-5g.css
            ---------- CONTENIDO ----------

            ---------- FIN CONTENIDO ----------


    ========================================
    üìÅ Carpeta: ./data/
    ========================================

        üìÑ Archivo: achievements.json
        ---------- CONTENIDO ----------
        {
            "era1": {
                "TOTAL_CLICKS_100": {
                    "name": "Dedo √Ågil",
                    "description": "Realiza 100 conexiones manuales.",
                    "reward": { "gems": 5 }
                },
                "TOTAL_CLICKS_1000": {
                    "name": "Tendinitis Incipiente",
                    "description": "Realiza 1,000 conexiones manuales.",
                    "reward": { "gems": 10 }
                },
                "TOTAL_CLICKS_5000": {
                    "name": "Maestro del Clic",
                    "description": "Realiza 5,000 conexiones manuales.",
                    "reward": { "gems": 25 }
                },
                "TOTAL_MONEY_10000": {
                    "name": "Peque√±o Magnate",
                    "description": "Acumula un total de $10,000.",
                    "reward": { "gems": 10 }
                },
                "TOTAL_MONEY_1M": {
                    "name": "Millonario Anal√≥gico",
                    "description": "Acumula un total de $1,000,000.",
                    "reward": { "gems": 50 }
                },
                "TOTAL_MONEY_100M": {
                    "name": "Bar√≥n de las Telecomunicaciones",
                    "description": "Acumula un total de $100,000,000.",
                    "reward": { "gems": 100 }
                },
                "DPS_100": {
                    "name": "Flujo Constante",
                    "description": "Alcanza un Flujo de Red de +$100/s.",
                    "reward": { "gems": 20 }
                },
                "DPS_1000": {
                    "name": "Autopista de Datos",
                    "description": "Alcanza un Flujo de Red de +$1,000/s.",
                    "reward": { "gems": 40 }
                },
                "UPGRADE_LEVEL_25_COBRE": {
                    "name": "Rey del Cobre",
                    "description": "Alcanza el nivel 25 en \"Instalar L√≠nea de Cobre\".",
                    "reward": { "gems": 15 }
                },
                "UPGRADE_LEVEL_50_COBRE": {
                    "name": "Emperador del Cobre",
                    "description": "Alcanza el nivel 50 en \"Instalar L√≠nea de Cobre\".",
                    "reward": { "gems": 30 }
                },
                "OWN_CENTRALITA_DIGITAL": {
                    "name": "El Futuro es Digital",
                    "description": "Construye tu primera Centralita Digital.",
                    "reward": { "gems": 35 }
                },
                "OWN_FIBRA_OPTICA": {
                    "name": "Velocidad de la Luz",
                    "description": "Instala tu primera Red de Fibra √ìptica.",
                    "reward": { "gems": 75 }
                },
                "FIRST_PRESTIGE": {
                    "name": "Salto Cu√°ntico",
                    "description": "Relanza tu imperio por primera vez.",
                    "reward": { "gems": 50 }
                },
                "TOTAL_PRESTIGE_POINTS_100": {
                    "name": "Arquitecto de la Innovaci√≥n",
                    "description": "Acumula un total de 100 Puntos de Innovaci√≥n.",
                    "reward": { "gems": 120 }
                }
            },
        	"era2": {
                "POPUP_HUNTER": {
                    "name": "Cazador de Ofertas",
                    "description": "Haz clic en un total de 50 pop-ups.",
                    "reward": { "gems": 40 }
                },
                "FRENZY_MASTER": {
                    "name": "Maestro del Frenes√≠",
                    "description": "Activa el beneficio 'Frenes√≠ de Clics' 25 veces.",
                    "reward": { "gems": 60 }
                },
                "DATA_HOARDER": {
                    "name": "Acumulador de Datos",
                    "description": "Llena la B√≥veda de Datos hasta su m√°xima capacidad por primera vez.",
                    "reward": { "gems": 80 }
                },
                "TOTAL_MONEY_1T": {
                    "name": "Magnate del Terabyte",
                    "description": "Acumula un total de $1 bill√≥n (Trillion).",
                    "reward": { "gems": 80 }
                },
                "TOTAL_MONEY_100T": {
                    "name": "Burbuja.com",
                    "description": "Acumula un total de $100 billones (Trillion).",
                    "reward": { "gems": 150 }
                },
                "DPS_100K": {
                    "name": "Ancho de Banda de Fibra",
                    "description": "Alcanza un Flujo de Red de +$100,000/s.",
                    "reward": { "gems": 50 }
                },
                "DPS_1M": {
                    "name": "Autopista de la Informaci√≥n",
                    "description": "Alcanza un Flujo de Red de +$1,000,000/s.",
                    "reward": { "gems": 100 }
                },
                "UPGRADE_LEVEL_50_MODEM": {
                    "name": "Rey del Dial-Up",
                    "description": "Maximiza al nivel 50 la 'Bater√≠a de M√≥dems 56k'.",
                    "reward": { "gems": 60 }
                },
                "UPGRADE_LEVEL_50_GSM": {
                    "name": "Bar√≥n Celular",
                    "description": "Maximiza al nivel 50 la 'Torre Celular GSM'.",
                    "reward": { "gems": 75 }
                },
                "OWN_PORTAL": {
                    "name": "Mi Propia Homepage",
                    "description": "Lanza tu primer 'Portal Web Conexi√≥nTotal'.",
                    "reward": { "gems": 90 }
                },
                "MAX_ISP_DATACENTER": {
                    "name": "Proveedor de Servicios Global",
                    "description": "Maximiza al nivel 10 el 'Centro de Datos ISP'.",
                    "reward": { "gems": 120 }
                },
                "MAX_PREPAID_SYSTEM": {
                    "name": "Mercado Masivo",
                    "description": "Maximiza al nivel 10 el 'Sistema de Tarjetas Prepago'.",
                    "reward": { "gems": 120 }
                },
                "PRESTIGE_POINTS_1K": {
                    "name": "Genio Innovador",
                    "description": "Acumula un total de 1,000 Puntos de Innovaci√≥n.",
                    "reward": { "gems": 200 }
                }
            }
        }
        ---------- FIN CONTENIDO ----------

        üìÑ Archivo: missions.json
        ---------- CONTENIDO ----------
        {
            "era1": {
                "GET_STARTED": {
                    "name": "Primeros Pasos",
                    "description": "Compra tu primer \"Kit de Herramientas B√°sico\".",
                    "reward": { "gems": 3 },
                    "phase": 1
                },
                "FIRST_LINE": {
                    "name": "La Primera Conexi√≥n",
                    "description": "Instala 5 \"L√≠neas de Cobre\".",
                    "reward": { "gems": 5 },
                    "requires": "GET_STARTED",
                    "phase": 1
                },
                "ESTABLISH_NETWORK": {
                    "name": "Estableciendo la Red",
                    "description": "Alcanza un Flujo de Red de +$10/s.",
                    "reward": { "gems": 8 },
                    "requires": "FIRST_LINE",
                    "phase": 1
                },
        
                "AUTOMATE_CALLS": {
                    "name": "Llamadas Automatizadas",
                    "description": "Construye tu primera \"Centralita Anal√≥gica\".",
                    "reward": { "gems": 15 },
                    "requires": "ESTABLISH_NETWORK",
                    "phase": 2
                },
                "GO_ONLINE": {
                    "name": "Conect√°ndose a la Red",
                    "description": "Compra 5 \"M√≥dems 2400 baudios\".",
                    "reward": { "gems": 20 },
                    "requires": "AUTOMATE_CALLS",
                    "phase": 2
                },
                "COMMUNITY_BUILDER": {
                    "name": "Constructor de Comunidades",
                    "description": "Lanza tu primer servidor BBS \"El Eco Digital\".",
                    "reward": { "gems": 30 },
                    "requires": "GO_ONLINE",
                    "phase": 2
                },
        
                "DIGITAL_SWITCH": {
                    "name": "El Salto Digital",
                    "description": "Actualiza a una \"Centralita Digital\".",
                    "reward": { "gems": 40 },
                    "requires": "COMMUNITY_BUILDER",
                    "phase": 3
                },
                "INTERNET_PROTOCOLS": {
                    "name": "El Lenguaje de Internet",
                    "description": "Implementa el \"Protocolo TCP/IP\" en tu red.",
                    "reward": { "gems": 50 },
                    "requires": "DIGITAL_SWITCH",
                    "phase": 3
                },
                "FIBER_REVOLUTION": {
                    "name": "La Revoluci√≥n de la Fibra",
                    "description": "Instala tu primera \"Red de Fibra √ìptica\".",
                    "reward": { "gems": 80 },
                    "requires": "INTERNET_PROTOCOLS",
                    "phase": 3
                },
                
                "INNOVATE_AND_RESET": {
                    "name": "Innovar y Reiniciar",
                    "description": "Gana al menos 10 Puntos de Innovaci√≥n y Relanza tu imperio.",
                    "reward": { "gems": 100 },
                    "requires": "FIBER_REVOLUTION",
                    "phase": 4
                }
            },
        	"era2": {
                "DIAL_UP_PIONEER": {
                    "name": "Pionero del Dial-Up",
                    "description": "Ofrece acceso a internet comprando 5 'Bater√≠as de M√≥dems 56k'.",
                    "reward": { "gems": 25 },
                    "phase": 1
                },
                "BASIC_WEB_PRESENCE": {
                    "name": "Presencia Web B√°sica",
                    "description": "Aprende el lenguaje de la web alcanzando el nivel 10 en 'Aprender HTML B√°sico'.",
                    "reward": { "gems": 30 },
                    "requires": "DIAL_UP_PIONEER",
                    "phase": 1
                },
                "BECOME_AN_ISP": {
                    "name": "Convi√©rtete en un ISP",
                    "description": "Centraliza tus operaciones construyendo tu primer 'Centro de Datos ISP'.",
                    "reward": { "gems": 50 },
                    "requires": "BASIC_WEB_PRESENCE",
                    "phase": 1
                },
                
                "MASTER_THE_SURGE": {
                    "name": "Maestr√≠a del Ancho de Banda",
                    "description": "La red es impredecible. Aprovecha un pop-up de 'Sobrecarga de Red' para maximizar las ganancias.",
                    "reward": { "gems": 40 },
                    "requires": "BECOME_AN_ISP",
                    "phase": 1
                },
        
                "GSM_BREAKTHROUGH": {
                    "name": "El Avance del GSM",
                    "description": "Entra en el mercado m√≥vil erigiendo 10 'Torres Celulares GSM'.",
                    "reward": { "gems": 60 },
                    "requires": "MASTER_THE_SURGE",
                    "phase": 2
                },
        
                "ADVERTISING_PARTNER": {
                    "name": "Socio Publicitario",
                    "description": "Los anunciantes te buscan. Haz clic en 3 pop-ups de cualquier tipo para cerrar tratos.",
                    "reward": { "gems": 70 },
                    "requires": "GSM_BREAKTHROUGH",
                    "phase": 2
                },
                
                "SMS_MONETIZATION": {
                    "name": "La Mina de Oro del SMS",
                    "description": "Capitaliza la mensajer√≠a de texto implementando tu primer 'Centro de SMS'.",
                    "reward": { "gems": 75 },
                    "requires": "ADVERTISING_PARTNER",
                    "phase": 2
                },
                "RINGTONE_FEVER": {
                    "name": "Fiebre por los Tonos",
                    "description": "Domina el mercado de la personalizaci√≥n m√≥vil comprando 5 mejoras de 'Vender Tonos de Llamada'.",
                    "reward": { "gems": 100 },
                    "requires": "SMS_MONETIZATION",
                    "phase": 2
                },
                "PORTAL_TO_THE_WORLD": {
                    "name": "Un Portal al Mundo",
                    "description": "Convi√©rtete en la p√°gina de inicio de todos lanzando tu 'Portal Web Conexi√≥nTotal'.",
                    "reward": { "gems": 120 },
                    "requires": "RINGTONE_FEVER",
                    "phase": 3
                },
                "ADVERTISING_EMPIRE": {
                    "name": "Imperio Publicitario",
                    "description": "Monetiza tu tr√°fico alcanzando el nivel 3 en 'Vender Espacio Publicitario'.",
                    "reward": { "gems": 150 },
                    "requires": "PORTAL_TO_THE_WORLD",
                    "phase": 3
                },
                "FIBER_CONNECTION": {
                    "name": "La Conexi√≥n de Fibra",
                    "description": "Asegura el futuro de tu red comprando tu primera 'Conexi√≥n al Backbone de Fibra'.",
                    "reward": { "gems": 200 },
                    "requires": "ADVERTISING_EMPIRE",
                    "phase": 3
                },
                "PREPARING_FOR_BROADBAND": {
                    "name": "Preparando la Banda Ancha",
                    "description": "Acumula 500 Puntos de Innovaci√≥n para financiar la investigaci√≥n de la pr√≥xima era.",
                    "reward": { "gems": 250 },
                    "requires": "FIBER_CONNECTION",
                    "phase": 4
                }
            }
        }
        ---------- FIN CONTENIDO ----------

        üìÑ Archivo: shopItems.json
        ---------- CONTENIDO ----------
        {
            "PERMANENT_DPC_BOOST_1": {
                "name": "Algoritmos de Conexi√≥n Mejorados",
                "description": "Aumenta permanentemente los ingresos por clic (+10%). Persiste tras Relanzar.",
                "cost": 30,
                "type": "dpc_multiplier_permanent",
                "value": 0.1
            },
            "PERMANENT_DPS_BOOST_1": {
                "name": "Optimizaci√≥n de Protocolos",
                "description": "Aumenta permanentemente todos los ingresos pasivos (+5%). Persiste tras Relanzar.",
                "cost": 50,
                "type": "dps_multiplier_permanent",
                "value": 0.05
            },
            "PERMANENT_DPC_BOOST_2": {
                "name": "Hardware de Clic Dedicado",
                "description": "Aumenta permanentemente los ingresos por clic en un +25% adicional.",
                "cost": 150,
                "type": "dpc_multiplier_permanent",
                "value": 0.25
            },
            "PERMANENT_DPS_BOOST_2": {
                "name": "Arquitectura de Red Optimizada",
                "description": "Aumenta permanentemente los ingresos pasivos en un +15% adicional.",
                "cost": 250,
                "type": "dps_multiplier_permanent",
                "value": 0.15
            },
            "ALL_MULTIPLIER_1": {
                "name": "El Protocolo G√©nesis",
                "description": "Un avance legendario. Aumenta TODOS los ingresos de dinero (clics, pasivos y prestigio) en un 20%.",
                "cost": 800,
                "type": "all_multiplier",
                "value": 0.2
            },
        	"POPUP_FREQUENCY_1": {
                "name": "Algoritmo de Marketing Viral",
                "description": "Aumenta permanentemente la frecuencia de aparici√≥n de pop-ups en un 10%.",
                "cost": 250,
                "type": "popup_frequency",
                "value": 0.1
            },
            "CLICK_FRENZY_DURATION_1": {
                "name": "Software de Overclocking",
                "description": "Aumenta permanentemente la duraci√≥n del 'Frenes√≠ de Clics' en 2 segundos.",
                "cost": 350,
                "type": "buff_duration",
                "value": { "buff": "clickFrenzy", "seconds": 2 }
            },
            "VAULT_CAPACITY_1": {
                "name": "Servidores de Cach√© Dedicados",
                "description": "Aumenta permanentemente la capacidad m√°xima de la B√≥veda de Datos como si tuvieras 600 segundos extra de DPS.",
                "cost": 400,
                "type": "vault_capacity",
                "value": 600
            },
            "VAULT_FILLER_1": {
                "name": "Protocolos de Compresi√≥n Mejorados",
                "description": "Aumenta permanentemente el dinero que se a√±ade a la b√≥veda en cada dep√≥sito en un 20%.",
                "cost": 450,
                "type": "vault_filler",
                "value": 0.2
            }
        }
        ---------- FIN CONTENIDO ----------

        üìÑ Archivo: story.json
        ---------- CONTENIDO ----------
        [
            {
                "era": "1980s - El Amanecer de la Conexi√≥n",
                "title": "La Red de Cobre y el 1G",
                "text": "La d√©cada de 1980 est√° dominada por la Red Telef√≥nica P√∫blica Conmutada (PSTN), una inmensa red de cables de cobre. En este entorno, das tus primeros pasos. A la vez, una revoluci√≥n silenciosa comienza: el despliegue de la primera generaci√≥n de telefon√≠a m√≥vil (1G). Esta tecnolog√≠a anal√≥gica, aunque rudimentaria y costosa, permite por primera vez la comunicaci√≥n de voz sin cables, sentando las bases de un futuro inimaginable."
            },
            {
                "era": "1990s - La Era Digital y la Web",
                "title": "2G/GSM y el Nacimiento de la Web",
                "text": "Los noventa traen dos transformaciones cruciales. Primero, la telefon√≠a m√≥vil se vuelve digital con el est√°ndar 2G (GSM), mejorando dr√°sticamente la calidad y seguridad, y dando a luz a una tecnolog√≠a revolucionaria: el SMS. Segundo, la World Wide Web se hace p√∫blica. El sonido de los m√≥dems dial-up se convierte en la puerta de entrada a un nuevo universo de informaci√≥n, y la 'Autopista de la Informaci√≥n' deja de ser un concepto para convertirse en una realidad tangible."
            },
            {
                "era": "2000s - La Revoluci√≥n de la Banda Ancha",
                "title": "3G y el Internet 'Siempre Activo'",
                "text": "El nuevo milenio acaba con la tiran√≠a del dial-up. La llegada de la banda ancha a los hogares a trav√©s de DSL y Cable cambia las reglas del juego, ofreciendo una conexi√≥n a internet 'siempre activa'. En paralelo, la tecnolog√≠a 3G lleva por primera vez una conexi√≥n de datos funcional a los tel√©fonos m√≥viles, permitiendo navegar por la web y usar el correo electr√≥nico en movimiento. Este es el verdadero catalizador de la era del smartphone que est√° por venir."
            },
            {
                "era": "2010s - El Ecosistema M√≥vil",
                "title": "4G LTE y la Nube",
                "text": "La d√©cada de 2010 pertenece al smartphone. El lanzamiento de las redes 4G LTE proporciona velocidades de banda ancha m√≥vil reales, haciendo posible el streaming de video en alta definici√≥n, las videollamadas y un ecosistema de aplicaciones que redefine la vida diaria. Al mismo tiempo, el concepto de 'la Nube' se masifica, permitiendo que nuestros datos y servicios nos sigan a cualquier dispositivo, en cualquier lugar. Tu red ya no es un servicio, es el pilar de la vida digital moderna."
            },
            {
                "era": "2020s - La Era de la Hiperconectividad",
                "title": "5G y la Latencia Cero",
                "text": "La tecnolog√≠a 5G representa un salto cu√°ntico. M√°s all√° de una mayor velocidad, su caracter√≠stica definitoria es la latencia ultra-baja, permitiendo una comunicaci√≥n casi instant√°nea entre dispositivos. Esto abre las puertas al Internet de las Cosas (IoT) a escala masiva, los veh√≠culos aut√≥nomos, la telemedicina y la realidad aumentada. Tu imperio ya no solo conecta personas, sino que se convierte en el sistema nervioso de un mundo inteligente y conectado."
            }
        ]
        ---------- FIN CONTENIDO ----------

        üìÑ Archivo: upgrades.json
        ---------- CONTENIDO ----------
        {
        	"era1": {
        		"infraestructura": {
        			"name": "Infraestructura y Expansi√≥n",
        			"items": {
        				"lineaCobre": {
        					"name": "Instalar L√≠nea de Cobre",
        					"description": "El primer paso. Conecta clientes y genera ingresos pasivos.",
        					"type": "dps",
        					"baseCost": 15,
        					"baseEffect": 0.5,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 10, "reqs": { "kitHerramientas": 10, "marketingLocal": 1 } },
        						{ "level": 25, "reqs": { "antenaRepetidora": 5 } },
        						{ "level": 40, "reqs": { "centralitaAnaloga": 5, "softwareTerminal": 35 } }
        					]
        				},
        				"antenaRepetidora": {
        					"name": "Instalar Antena Repetidora",
        					"description": "Amplifica la se√±al para llegar a las afueras de la ciudad.",
        					"type": "dps",
        					"baseCost": 180,
        					"baseEffect": 5,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 1, "reqs": { "lineaCobre": 15 } },
        						{ "level": 15, "reqs": { "softwareTerminal": 10, "marketingLocal": 10 } },
        						{ "level": 35, "reqs": { "centralitaAnaloga": 5 } }
        					]
        				},
        				"centralitaAnaloga": {
        					"name": "Construir Centralita Anal√≥gica",
        					"description": "Un conmutador que gestiona docenas de l√≠neas autom√°ticamente.",
        					"type": "dps",
        					"baseCost": 1800,
        					"baseEffect": 30,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 1, "reqs": { "lineaCobre": 35, "antenaRepetidora": 10 } },
        						{ "level": 15, "reqs": { "modem2400": 5, "tecladoTonos": 25 } },
        						{ "level": 30, "reqs": { "nodoRegional": 1 } },
        						{ "level": 45, "reqs": { "servidorBBS": 10 } }
        					]
        				},
        				"nodoRegional": {
        					"name": "Establecer Nodo Regional",
            				"description": "Un centro de conexi√≥n que gestiona el tr√°fico de varios barrios, mejorando la eficiencia de la red.",
            				"type": "dps",
            				"baseCost": 9500,  
            				"baseEffect": 150,  
            				"maxLevel": 50,
            				"requirements": [
                				{ "level": 1, "reqs": { "centralitaAnaloga": 10, "modem2400": 15 } },
        						{ "level": 20, "reqs": { "servidorBBS": 5 } },
        						{ "level": 40, "reqs": { "centralitaDigital": 1 } }
            				]
        				},
        				"centralitaDigital": {
        					"name": "Actualizar a Centralita Digital",
        					"description": "Reemplaza rel√©s por microchips para una eficiencia sin precedentes.",
        					"type": "dps",
        					"baseCost": 50000,
        					"baseEffect": 500,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 1, "reqs": { "nodoRegional": 10, "centralitaAnaloga": 40 } },
        						{ "level": 15, "reqs": { "protocoloTCPIP": 5, "tarjetaRed": 1 } },
        						{ "level": 35, "reqs": { "fibraOptica": 1 } }
        					]
        				},
        				"fibraOptica": {
        					"name": "Red de Fibra √ìptica",
        					"description": "Tecnolog√≠a experimental que usa pulsos de luz. Un salto cu√°ntico.",
        					"type": "dps",
        					"baseCost": 250000,
        					"baseEffect": 1200,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 1, "reqs": { "centralitaDigital": 10, "protocoloTCPIP": 15 } },
        						{ "level": 25, "reqs": { "tarjetaRed": 30 } }
        					]
        				}
        			}
        		},
        		"equipamiento": {
        			"name": "Equipamiento y Terminales",
        			"items": {
        				"kitHerramientas": {
        					"name": "Kit de Herramientas B√°sico",
        					"description": "Un buen soldador y alicates. Cada conexi√≥n manual es m√°s limpia.",
        					"type": "dpc",
        					"baseCost": 10,
        					"baseEffect": 1,
        					"maxLevel": 50,
        					"requirements": []
        				},
        				"tecladoTonos": {
        					"name": "Teclado de Tonos DTMF",
        					"description": "Reemplaza el dial rotatorio, optimizando cada clic.",
        					"type": "dpc",
        					"baseCost": 100,
        					"baseEffect": 3,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 5, "reqs": { "kitHerramientas": 10, "lineaCobre": 5 } },
        						{ "level": 20, "reqs": { "softwareTerminal": 15 } },
        						{ "level": 40, "reqs": { "centralitaAnaloga": 1, "modem2400": 1 } }
        					]
        				},
        				"modem2400": {
        					"name": "M√≥dem 2400 baudios",
        					"description": "Permite a los ordenadores comunicarse por v√≠a telef√≥nica.",
        					"type": "dps",
        					"baseCost": 800,
        					"baseEffect": 12,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 1, "reqs": { "antenaRepetidora": 5, "softwareTerminal": 5 } },
        						{ "level": 25, "reqs": { "centralitaAnaloga": 1 } },
        						{ "level": 40, "reqs": { "servidorBBS": 1 } }
        					]
        				},
        				"tarjetaRed": {
        					"name": "Tarjeta de Red ISA",
        					"description": "Una placa para PCs que permite conexiones directas y eficientes.",
        					"type": "dpc",
        					"baseCost": 15000,
        					"baseEffect": 25,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 1, "reqs": { "protocoloTCPIP": 1 } },
        						{ "level": 15, "reqs": { "centralitaDigital": 5 } },
        						{ "level": 30, "reqs": { "fibraOptica": 1 } }
        					]
        				}
        			}
        		},
        		"software": {
        			"name": "Software y Protocolos",
        			"items": {
        				"marketingLocal": {
        					"name": "Campa√±a de Marketing Local",
        					"description": "Anuncios en peri√≥dicos. Atrae demanda para tu red de cobre.",
        					"type": "dps",
        					"baseCost": 300,
        					"baseEffect": 3,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 1, "reqs": { "lineaCobre": 5 } },
        						{ "level": 20, "reqs": { "antenaRepetidora": 10 } },
        						{ "level": 35, "reqs": { "servidorBBS": 1 } }
        					]
        				},
        				"softwareTerminal": {
        					"name": "Software de Terminal",
        					"description": "Un c√≥digo m√°s limpio para procesar datos m√°s r√°pido en cada clic.",
        					"type": "dpc",
        					"baseCost": 180,
        					"baseEffect": 5,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 1, "reqs": { "kitHerramientas": 5, "tecladoTonos": 1 } },
        						{ "level": 20, "reqs": { "lineaCobre": 25 } },
        						{ "level": 35, "reqs": { "modem2400": 10, "centralitaAnaloga": 5 } }
        					]
        				},
        				"servidorBBS": {
        					"name": "Servidor BBS \"El Eco Digital\"",
        					"description": "Crea una comunidad online. Los usuarios pagan una cuota por acceso.",
        					"type": "dps",
        					"baseCost": 9000,
        					"baseEffect": 80,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 1, "reqs": { "centralitaAnaloga": 5, "modem2400": 10 } },
        						{ "level": 15, "reqs": { "softwareTerminal": 30 } },
        						{ "level": 30, "reqs": { "nodoRegional": 5 } }
        					]
        				},
        				"protocoloTCPIP": {
        					"name": "Implementar Protocolo TCP/IP",
        					"description": "Estandariza tu red para un tr√°fico masivo. La base de Internet.",
        					"type": "dpc",
        					"baseCost": 65000,
        					"baseEffect": 60,
        					"maxLevel": 50,
        					"requirements": [
        						{ "level": 1, "reqs": { "centralitaDigital": 1, "servidorBBS": 20 } },
        						{ "level": 10, "reqs": { "tarjetaRed": 5 } },
        						{ "level": 25, "reqs": { "centralitaDigital": 10 } }
        					]
        				}
        			}
        		}
        	},
        	"era2": {
                "infraestructuraWeb": {
                    "name": "Infraestructura de Red",
                    "items": {
                        "modem56k": {
                            "name": "Instalar Bater√≠a de M√≥dems 56k",
                            "description": "Ofrece acceso a internet 'de alta velocidad' a tus clientes. El sonido del futuro.",
                            "type": "dps",
                            "baseCost": 1000000,
                            "baseEffect": 350,
                            "maxLevel": 50,
                            "requirements": [
                                { "level": 15, "reqs": { "htmlBasico": 10 } },
                                { "level": 30, "reqs": { "algoritmoCompresion": 10 } },
                                { "level": 45, "reqs": { "cgiScripts": 5 } }
                            ]
                        },
                        "torreGSM": {
                            "name": "Erigir Torre Celular GSM",
                            "description": "Despliega la red 2G para ofrecer servicios de voz digital y SMS. Una nueva frontera.",
                            "type": "dps",
                            "baseCost": 8500000,
                            "baseEffect": 3000,
                            "maxLevel": 50,
                            "requirements": [
                                { "level": 1, "reqs": { "modem56k": 15 } },
                                { "level": 20, "reqs": { "htmlBasico": 20 } },
                                { "level": 35, "reqs": { "servidorEmail": 1 } }
                            ]
                        },
                        "ispDatacenter": {
                            "name": "Construir Centro de Datos ISP",
                            "description": "Centraliza tus servidores y conexiones, multiplicando la eficiencia de toda tu red.",
                            "type": "dps_multiplier",
                            "baseCost": 150000000,
                            "baseEffect": 0.05,
                            "maxLevel": 10,
                            "requirements": [
                                { "level": 1, "reqs": { "modem56k": 40, "servidorEmail": 15 } },
                                { "level": 5, "reqs": { "torreGSM": 25, "centroSMS": 1 } },
                                { "level": 9, "reqs": { "redISDN": 10 } }
                            ]
                        },
                        "redISDN": {
                            "name": "Implementar L√≠neas RDSI (ISDN)",
                            "description": "Una conexi√≥n digital premium para empresas. Mucho m√°s r√°pida y rentable que el dial-up.",
                            "type": "dps",
                            "baseCost": 600000000,
                            "baseEffect": 25000,
                            "maxLevel": 50,
                            "requirements": [
                                { "level": 1, "reqs": { "modem56k": 50, "ispDatacenter": 2 } },
                                { "level": 20, "reqs": { "portalWeb": 1 } },
                                { "level": 40, "reqs": { "roamingAcuerdo": 5 } }
                            ]
                        },
                        "backboneFibra": {
                            "name": "Conexi√≥n al Backbone de Fibra",
                            "description": "Conecta tu ISP a las grandes autopistas de internet para un ancho de banda masivo.",
                            "type": "dps",
                            "baseCost": 40000000000,
                            "baseEffect": 600000,
                            "maxLevel": 50,
                            "requirements": [
                                { "level": 1, "reqs": { "redISDN": 35, "ispDatacenter": 7 } },
                                { "level": 20, "reqs": { "bannerPublicitario": 5, "portalWeb": 30 } },
                                { "level": 40, "reqs": { "tarjetaPrepago": 5 } }
                            ]
                        }
                    }
                },
                "worldWideWeb": {
                    "name": "La World Wide Web",
                    "items": {
                        "htmlBasico": {
                            "name": "Aprender HTML B√°sico",
                            "description": "Etiquetas <blink> y GIFs animados. Mejora la eficiencia de tus clics al crear p√°ginas web.",
                            "type": "dpc",
                            "baseCost": 800000,
                            "baseEffect": 250,
                            "maxLevel": 50,
                            "requirements": [
                                { "level": 10, "reqs": { "modem56k": 5 } },
                                { "level": 25, "reqs": { "modem56k": 20 } },
                                { "level": 40, "reqs": { "algoritmoCompresion": 15 } }
                            ]
                        },
                        "algoritmoCompresion": {
                            "name": "Algoritmos de Compresi√≥n de Datos",
                            "description": "Optimiza la transferencia de datos en cada conexi√≥n manual, haci√©ndola m√°s rentable.",
                            "type": "dpc",
                            "baseCost": 6000000,
                            "baseEffect": 1500,
                            "maxLevel": 50,
                            "requirements": [
                                { "level": 1, "reqs": { "htmlBasico": 10 } },
                                { "level": 20, "reqs": { "modem56k": 15 } },
                                { "level": 40, "reqs": { "torreGSM": 5 } }
                            ]
                        },
                        "cgiScripts": {
                            "name": "Desarrollar Scripts CGI",
                            "description": "Contadores de visitas y libros de firmas. Cada interacci√≥n con tus p√°ginas es un clic m√°s valioso.",
                            "type": "dpc",
                            "baseCost": 15000000,
                            "baseEffect": 4000,
                            "maxLevel": 50,
                            "requirements": [
                                { "level": 1, "reqs": { "htmlBasico": 25, "algoritmoCompresion": 10 } },
                                { "level": 20, "reqs": { "torreGSM": 10 } },
                                { "level": 40, "reqs": { "servidorEmail": 10 } }
                            ]
                        },
                        "servidorEmail": {
                            "name": "Ofrecer Servicio de Correo Electr√≥nico",
                            "description": "Vende cuentas de email @tuimperio.com. Una fuente de ingresos estable.",
                            "type": "dps",
                            "baseCost": 50000000,
                            "baseEffect": 15000,
                            "maxLevel": 50,
                            "requirements": [
                                { "level": 1, "reqs": { "modem56k": 25, "htmlBasico": 20 } },
                                { "level": 15, "reqs": { "torreGSM": 10 } },
                                { "level": 35, "reqs": { "cgiScripts": 15 } }
                            ]
                        },
                        "portalWeb": {
                            "name": "Lanzar Portal Web 'Conexi√≥nTotal'",
                            "description": "Un 'Homepage' con noticias, buscador y chat. Atrae tr√°fico masivo.",
                            "type": "dps",
                            "baseCost": 950000000,
                            "baseEffect": 110000,
                            "maxLevel": 50,
                            "requirements": [
                                { "level": 1, "reqs": { "servidorEmail": 30, "cgiScripts": 25 } },
                                { "level": 15, "reqs": { "ispDatacenter": 3 } },
                                { "level": 30, "reqs": { "redISDN": 5 } }
                            ]
                        },
                        "bannerPublicitario": {
                            "name": "Vender Espacio Publicitario",
                            "description": "Monetiza el tr√°fico de tu portal con banners. Aumenta los ingresos de toda tu presencia web.",
                            "type": "dps_multiplier",
                            "baseCost": 2500000000,
                            "baseEffect": 0.10,
                            "maxLevel": 10,
                            "requirements": [
                                { "level": 1, "reqs": { "portalWeb": 10, "cgiScripts": 40 } },
                                { "level": 5, "reqs": { "roamingAcuerdo": 15 } },
                                { "level": 8, "reqs": { "tonosPolifonicos": 5 } }
                            ]
                        }
                    }
                },
                "serviciosMoviles": {
                    "name": "Software y Servicios M√≥viles",
                    "items": {
                        "centroSMS": {
                            "name": "Implementar un Centro de SMS",
                            "description": "Gestiona el tr√°fico de mensajes de texto en tu red. Cada mensaje es dinero.",
                            "type": "dps_multiplier",
                            "baseCost": 300000000,
                            "baseEffect": 0.15,
                            "maxLevel": 10,
                            "requirements": [
                                { "level": 1, "reqs": { "torreGSM": 20 } },
                                { "level": 5, "reqs": { "servidorEmail": 10 } },
                                { "level": 8, "reqs": { "ispDatacenter": 1 } }
                            ]
                        },
                        "roamingAcuerdo": {
                            "name": "Firmar Acuerdos de Roaming",
                            "description": "Genera comisiones permitiendo que tus clientes usen su m√≥vil en otras redes (y viceversa).",
                            "type": "dps",
                            "baseCost": 1200000000,
                            "baseEffect": 150000,
                            "maxLevel": 50,
                            "requirements": [
                                { "level": 1, "reqs": { "torreGSM": 40, "ispDatacenter": 4 } },
                                { "level": 15, "reqs": { "centroSMS": 5 } },
                                { "level": 30, "reqs": { "portalWeb": 10 } }
                            ]
                        },
                        "tonosPolifonicos": {
                            "name": "Vender Tonos de Llamada",
                            "description": "¬°La primera gran moda m√≥vil! Vende melod√≠as para m√≥viles y genera ingresos masivos.",
                            "type": "dps",
                            "baseCost": 4500000000,
                            "baseEffect": 400000,
                            "maxLevel": 50,
                            "requirements": [
                                { "level": 1, "reqs": { "centroSMS": 6, "roamingAcuerdo": 10 } },
                                { "level": 20, "reqs": { "portalWeb": 15 } },
                                { "level": 40, "reqs": { "tarjetaPrepago": 1 } }
                            ]
                        },
                        "tarjetaPrepago": {
                            "name": "Lanzar Sistema de Tarjetas Prepago",
                            "description": "Abre el mercado m√≥vil a millones. Potencia enormemente todos tus ingresos m√≥viles.",
                            "type": "dps_multiplier",
                            "baseCost": 20000000000,
                            "baseEffect": 0.20,
                            "maxLevel": 10,
                            "requirements": [
                                { "level": 1, "reqs": { "tonosPolifonicos": 15, "roamingAcuerdo": 25 } },
                                { "level": 5, "reqs": { "bannerPublicitario": 3 } },
                                { "level": 8, "reqs": { "backboneFibra": 1 } }
                            ]
                        }
                    }
                }
            }
        }
        ---------- FIN CONTENIDO ----------


    ========================================
    üìÅ Carpeta: ./js/
    ========================================

        üìÑ Archivo: audio.js
        ---------- CONTENIDO ----------
        // js/audio.js (VERSI√ìN OPTIMIZADA)
        
        // 1. En lugar de crear los Howls, solo definimos la configuraci√≥n de cada sonido.
        //    No se descarga nada en este punto.
        const soundConfigs = {
            // Grupo de M√∫sica
            titleMusic: { src: ['assets/audio/title-music.mp3'], loop: true, html5: true, type: 'music' },
            era1Music:  { src: ['assets/audio/era1-music.mp3'], loop: true, html5: true, type: 'music' },
            era2Music:  { src: ['assets/audio/era2-music.mp3'], loop: true, html5: true, type: 'music' },
        
            // Grupo de Efectos (SFX)
            click:            { src: ['assets/audio/click.mp3'], pool: 5, type: 'sfx' },
            buySuccess:       { src: ['assets/audio/success.mp3'], type: 'sfx' },
            buyFail:          { src: ['assets/audio/fail.mp3'], type: 'sfx' },
            menuHover:        { src: ['assets/audio/hover.mp3'], type: 'sfx' },
            introPowerOn:     { src: ['assets/audio/power-on.mp3'], type: 'sfx' },
            introCrtHum:      { src: ['assets/audio/crt-hum.mp3'], loop: true, type: 'sfx' },
            introRotaryPhone: { src: ['assets/audio/rotary-phone.mp3'], type: 'sfx' },
            introSuccess:     { src: ['assets/audio/intro-success.mp3'], type: 'sfx' },
            win95Startup:     { src: ['assets/audio/win95-startup.mp3'], type: 'sfx' },
            modemDialup:      { src: ['assets/audio/modem-dialup.mp3'], type: 'sfx' },
            keyboardTyping:   { src: ['assets/audio/keyboard-typing.mp3'], loop: true, type: 'sfx' },
            shutdown:         { src: ['assets/audio/shutdown.mp3'], type: 'sfx' },
            biosBeep:         { src: ['assets/audio/bios-beep.mp3'], type: 'sfx' }
        };
        
        // 2. Creamos un objeto para almacenar los sonidos una vez que se carguen.
        const loadedSounds = {};
        
        // 3. Funci√≥n inteligente que obtiene un sonido. Si no est√° cargado, lo carga.
        function getSound(soundName) {
            // Si el sonido ya se carg√≥ antes, simplemente lo devolvemos.
            if (loadedSounds[soundName]) {
                return loadedSounds[soundName];
            }
        
            // Si no se ha cargado, buscamos su configuraci√≥n.
            const config = soundConfigs[soundName];
            if (config) {
                // Creamos la instancia de Howl (AQU√ç es donde se descarga el archivo)
                const sound = new Howl(config);
                // Guardamos la instancia para no volver a cargarla.
                loadedSounds[soundName] = sound;
                // La devolvemos para poder usarla.
                return sound;
            }
            return null;
        }
        
        // 4. Modificamos las funciones existentes para que usen nuestro nuevo sistema.
        function playSound(soundName) {
            const sound = getSound(soundName);
            if (sound) {
                sound.play();
            }
        }
        
        function setMusicVolume(level) {
            // Itera sobre los sonidos YA CARGADOS para ajustar su volumen
            for (const key in loadedSounds) {
                if (soundConfigs[key] && soundConfigs[key].type === 'music') {
                    loadedSounds[key].volume(level);
                }
            }
        }
        
        function setSfxVolume(level) {
            for (const key in loadedSounds) {
                if (soundConfigs[key] && soundConfigs[key].type === 'sfx') {
                    loadedSounds[key].volume(level);
                }
            }
        }
        
        // Esta funci√≥n ahora es mucho menos importante, pero la mantenemos por consistencia
        function initializeVolumes(musicVol, sfxVol) {
            setMusicVolume(musicVol);
            setSfxVolume(sfxVol);
        }
        
        // 5. Necesitamos una forma de detener los sonidos por su nombre, ya que no tenemos acceso
        //    directo a las instancias `howl` todo el tiempo.
        function stopSound(soundName) {
            const sound = getSound(soundName);
            if (sound) {
                sound.stop();
            }
        }
        
        function fadeSound(soundName, from, to, duration) {
            const sound = getSound(soundName);
            if (sound) {
                sound.fade(from, to, duration);
            }
        }
        
        function isSoundPlaying(soundName) {
            const sound = loadedSounds[soundName]; // Solo comprueba si est√° cargado y sonando
            return sound ? sound.playing() : false;
        }
        ---------- FIN CONTENIDO ----------

        üìÑ Archivo: dataLogic.js
        ---------- CONTENIDO ----------
        // Este archivo contiene la L√ìGICA que se "inyectar√°" en los datos puros cargados desde los JSON.
        
        const dataLogic = {
            achievements: {
                // --- LOGROS DE ERA 1 ---
                'TOTAL_CLICKS_100': (state) => state.totalClicks >= 100,
                'TOTAL_CLICKS_1000': (state) => state.totalClicks >= 1000,
                'TOTAL_CLICKS_5000': (state) => state.totalClicks >= 5000,
                'TOTAL_MONEY_10000': (state) => state.totalMoneyEver >= 10000,
                'TOTAL_MONEY_1M': (state) => state.totalMoneyEver >= 1000000,
                'TOTAL_MONEY_100M': (state) => state.totalMoneyEver >= 100000000,
                'DPS_100': (state) => state.moneyPerSecond >= 100,
                'DPS_1000': (state) => state.moneyPerSecond >= 1000,
                'UPGRADE_LEVEL_25_COBRE': (state) => (state.upgradeLevels.lineaCobre || 0) >= 25,
                'UPGRADE_LEVEL_50_COBRE': (state) => (state.upgradeLevels.lineaCobre || 0) >= 50,
                'OWN_CENTRALITA_DIGITAL': (state) => (state.upgradeLevels.centralitaDigital || 0) > 0,
                'OWN_FIBRA_OPTICA': (state) => (state.upgradeLevels.fibraOptica || 0) > 0,
                'FIRST_PRESTIGE': (state) => state.prestigePoints > 0,
                'TOTAL_PRESTIGE_POINTS_100': (state) => state.prestigePoints >= 100,
        
                // --- LOGROS DE ERA 2 ---
        		'POPUP_HUNTER': (state) => (state.stats.popupsClicked || 0) >= 50,
        		'FRENZY_MASTER': (state) => (state.stats.clickFrenziesActivated || 0) >= 25,
        		'DATA_HOARDER': (state) => {
        			const vaultCapacity = (state.moneyPerSecond || 1) * VAULT_CAPACITY_DPS_MULTIPLIER;
        			return (state.dataVault.currentValue || 0) >= vaultCapacity;
        		},
                'TOTAL_MONEY_1T': (state) => state.totalMoneyEver >= 1e12,
                'TOTAL_MONEY_100T': (state) => state.totalMoneyEver >= 1e14,
                'DPS_100K': (state) => state.moneyPerSecond >= 100000,
                'DPS_1M': (state) => state.moneyPerSecond >= 1000000,
                'UPGRADE_LEVEL_50_MODEM': (state) => (state.upgradeLevels.modem56k || 0) >= 50,
                'UPGRADE_LEVEL_50_GSM': (state) => (state.upgradeLevels.torreGSM || 0) >= 50,
                'OWN_PORTAL': (state) => (state.upgradeLevels.portalWeb || 0) > 0,
                'MAX_ISP_DATACENTER': (state) => (state.upgradeLevels.ispDatacenter || 0) >= 10,
                'MAX_PREPAID_SYSTEM': (state) => (state.upgradeLevels.tarjetaPrepago || 0) >= 10,
                'PRESTIGE_POINTS_1K': (state) => state.prestigePoints >= 1000
            },
            missions: {
                // --- MISIONES DE ERA 1 ---
                'GET_STARTED': (state) => (state.upgradeLevels.kitHerramientas || 0) > 0,
                'FIRST_LINE': (state) => (state.upgradeLevels.lineaCobre || 0) >= 5,
                'ESTABLISH_NETWORK': (state) => state.moneyPerSecond >= 10,
                'AUTOMATE_CALLS': (state) => (state.upgradeLevels.centralitaAnaloga || 0) > 0,
                'GO_ONLINE': (state) => (state.upgradeLevels.modem2400 || 0) >= 5,
                'COMMUNITY_BUILDER': (state) => (state.upgradeLevels.servidorBBS || 0) > 0,
                'DIGITAL_SWITCH': (state) => (state.upgradeLevels.centralitaDigital || 0) > 0,
                'INTERNET_PROTOCOLS': (state) => (state.upgradeLevels.protocoloTCPIP || 0) > 0,
                'FIBER_REVOLUTION': (state) => (state.upgradeLevels.fibraOptica || 0) > 0,
                'INNOVATE_AND_RESET': (state) => state.prestigePoints >= 10,
        
                // --- MISIONES DE ERA 2 ---
                'DIAL_UP_PIONEER': (state) => (state.upgradeLevels.modem56k || 0) >= 5,
                'BASIC_WEB_PRESENCE': (state) => (state.upgradeLevels.htmlBasico || 0) >= 10,
                'BECOME_AN_ISP': (state) => (state.upgradeLevels.ispDatacenter || 0) > 0,
        		'MASTER_THE_SURGE': (state) => (state.stats.dpsOverloadsActivated || 0) >= 1,
        		'ADVERTISING_PARTNER': (state) => (state.stats.popupsClicked || 0) >= 3,
                'GSM_BREAKTHROUGH': (state) => (state.upgradeLevels.torreGSM || 0) >= 10,
                'SMS_MONETIZATION': (state) => (state.upgradeLevels.centroSMS || 0) > 0,
                'RINGTONE_FEVER': (state) => (state.upgradeLevels.tonosPolifonicos || 0) >= 5,
                'PORTAL_TO_THE_WORLD': (state) => (state.upgradeLevels.portalWeb || 0) > 0,
                'ADVERTISING_EMPIRE': (state) => (state.upgradeLevels.bannerPublicitario || 0) >= 3,
                'FIBER_CONNECTION': (state) => (state.upgradeLevels.backboneFibra || 0) > 0,
                'PREPARING_FOR_BROADBAND': (state) => state.prestigePoints >= 500
            },
            shopItems: {
                'PERMANENT_DPC_BOOST_1': (state) => state.shopUpgrades.includes('PERMANENT_DPC_BOOST_1'),
                'PERMANENT_DPS_BOOST_1': (state) => state.shopUpgrades.includes('PERMANENT_DPS_BOOST_1'),
                'PERMANENT_DPC_BOOST_2': (state) => state.shopUpgrades.includes('PERMANENT_DPC_BOOST_2'),
                'PERMANENT_DPS_BOOST_2': (state) => state.shopUpgrades.includes('PERMANENT_DPS_BOOST_2'),
                'STARTING_MONEY_1': (state) => state.shopUpgrades.includes('STARTING_MONEY_1'),
                'PRESTIGE_BOOST_1': (state) => state.shopUpgrades.includes('PRESTIGE_BOOST_1'),
                'AUTO_CLICKER_1': (state) => state.shopUpgrades.includes('AUTO_CLICKER_1'),
                'ALL_MULTIPLIER_1': (state) => state.shopUpgrades.includes('ALL_MULTIPLIER_1'),
                'KEEP_UPGRADES_1': (state) => state.shopUpgrades.includes('KEEP_UPGRADES_1')
            }
        };
        ---------- FIN CONTENIDO ----------

        üìÑ Archivo: main.js
        ---------- CONTENIDO ----------
        // ---- DEFINICIONES Y ESTADO DEL JUEGO (ESTRUCTURA BALANCEADA Y SINE√âRGICA) ----
        let upgrades = {};
        let achievements = {};
        let missions = {};
        let shopItems = {};
        let storyData = [];
        let currentStoryIndex = 0;
        
        const GAME_VERSION = "1.4";
        const SAVE_KEY = 'imperioConexionSave_v2';
        
        // ==================================================================
        // CONSTANTES DE BALANCEO DEL JUEGO
        // ==================================================================
        const UPGRADE_COST_GROWTH_RATE = 1.12;
        const PRESTIGE_MONEY_FACTOR    = 50000;
        const PRESTIGE_POWER_FACTOR    = 0.45;
        const PRESTIGE_BONUS_PER_POINT = 0.02;
        
        // ---- CONSTANTES PARA POP-UPS (ERA 2+) ----
        const POPUP_MIN_SECONDS = 45;   // El tiempo m√≠nimo antes de que pueda aparecer un pop-up
        const POPUP_MAX_SECONDS = 120;  // El tiempo m√°ximo que puede tardar en aparecer un pop-up
        const POPUP_LIFESPAN_SECONDS = 15;   // Cu√°ntos segundos permanece el pop-up en pantalla
        
        const JACKPOT_DPS_EQUIVALENT = 600;  // Recompensa: valor de 600 segundos (10 minutos) de DPS
        const CLICK_FRENZY_DURATION_SECONDS = 13; // Duraci√≥n del buff de clics
        const CLICK_FRENZY_MULTIPLIER = 777;      // Multiplicador del buff de clics
        const DPS_OVERLOAD_DURATION_SECONDS = 77; // Duraci√≥n del buff de DPS
        const DPS_OVERLOAD_MULTIPLIER = 7;        // Multiplicador del buff de DPS
        
        // ---- CONSTANTES PARA B√ìVEDA DE DATOS (ERA 2+) ----
        const VAULT_CLICKS_TO_TRIGGER = 10;      // N√∫mero de clics manuales para a√±adir dinero a la b√≥veda
        const VAULT_REWARD_CLICK_MULTIPLIER = 100; // Multiplica el valor del clic para determinar cu√°nto se guarda
        const VAULT_CAPACITY_DPS_MULTIPLIER = 1800; // La capacidad m√°xima ser√° valor de 1800s (30 min) de DPS
        const VAULT_OPEN_COOLDOWN_SECONDS = 3600;  // Cooldown para abrir la b√≥veda: 3600 segundos (1 hora)
        
        // ==================================================================
        // CONSTANTES DE PROGRESI√ìN DE ERAS
        // ==================================================================
        const ERA_DATA = {
            // La Era 1 no tiene coste, es el punto de partida.
            'era1': {
                name: '1G: Los Inicios',
                description: 'La era de la telefon√≠a anal√≥gica y las conexiones conmutadas. ¬°El primer paso hacia un mundo conectado!'
            },
            'era2': { 
                name: '2G: Los 90',
                description: 'La revoluci√≥n digital llega con la telefon√≠a m√≥vil GSM, el SMS y el nacimiento de la World Wide Web.', // Descripci√≥n de ejemplo
                prestigeCost: 100,
                requiredEra: 'era1'
            },
            // 'era3': { ... }
        };
        
        let gameState = {
        	version: GAME_VERSION,
            money: 0,
        	totalClicks: 0,
            moneyPerClick: 1,
            moneyPerSecond: 0,
            totalMoneyEver: 0,
            prestigePoints: 0,
        	gems: 0,
        	currentEra: 'era1',
        	unlockedEras: ['era1'],
            unlockedAchievements: [],
            completedMissions: [],
            shopUpgrades: [],
        	activeBuffs: {
                clickFrenzy: { timeLeft: 0 },
                dpsOverload: { timeLeft: 0 }
            },
            nextPopupTimestamp: 0,
        	dataVault: {
                currentValue: 0,
                clickCounter: 0,
                cooldownTimestamp: 0
            },
        	stats: {
                popupsClicked: 0,
                dpsOverloadsActivated: 0,
        		clickFrenziesActivated: 0
            },
        	settings: {
                musicVolume: 0.4,
                sfxVolume: 0.7,
                prestigeConfirmation: true
            },
            upgradeLevels: {
                // --- Era 1 ---
                'lineaCobre': 0, 'antenaRepetidora': 0, 'centralitaAnaloga': 0, 'nodoRegional': 0, 'centralitaDigital': 0, 'fibraOptica': 0,
                'kitHerramientas': 0, 'tecladoTonos': 0, 'modem2400': 0, 'tarjetaRed': 0,
                'marketingLocal': 0, 'softwareTerminal': 0, 'servidorBBS': 0, 'protocoloTCPIP': 0,
        
                // --- Era 2 ---
                'modem56k': 0, 'torreGSM': 0, 'ispDatacenter': 0, 'redISDN': 0, 'backboneFibra': 0,
                'htmlBasico': 0, 'cgiScripts': 0, 'servidorEmail': 0, 'portalWeb': 0, 'bannerPublicitario': 0,
                'algoritmoCompresion': 0, 'centroSMS': 0, 'roamingAcuerdo': 0, 'tonosPolifonicos': 0, 'tarjetaPrepago': 0
            },
        };
        
        // ---- CARGA Y PROCESAMIENTO DE DATOS DEL JUEGO ----
        
        async function loadGameData(progressCallback) {
            try {
                const dataFiles = [
                    { key: 'upgrades', path: 'data/upgrades.json', message: 'Cargando esquemas de mejoras...' },
                    { key: 'achievements', path: 'data/achievements.json', message: 'Compilando registros de logros...' },
                    { key: 'missions', path: 'data/missions.json', message: 'Descargando directivas de misi√≥n...' },
                    { key: 'shopItems', path: 'data/shopItems.json', message: 'Accediendo a la tienda de innovaci√≥n...' },
                    { key: 'story', path: 'data/story.json', message: 'Recuperando archivos de la historia...' }
                ];
        
                const totalFiles = dataFiles.length;
                let loadedFiles = 0;
                const loadedData = {};
        
                for (const file of dataFiles) {
                    const response = await fetch(file.path);
                    loadedData[file.key] = await response.json();
                    loadedFiles++;
                    if (progressCallback) {
                        progressCallback(loadedFiles / totalFiles, file.message);
                    }
                }
                // "Hidratamos" los datos con su l√≥gica
                for (const eraId in loadedData.achievements) {
                    for (const id in loadedData.achievements[eraId]) {
                        if (dataLogic.achievements[id]) loadedData.achievements[eraId][id].check = dataLogic.achievements[id];
                    }
                }
                for (const eraId in loadedData.missions) {
                    for (const id in loadedData.missions[eraId]) {
                        if (dataLogic.missions[id]) loadedData.missions[eraId][id].check = dataLogic.missions[id];
                    }
                }
                for (const id in loadedData.shopItems) {
                    if (dataLogic.shopItems[id]) loadedData.shopItems[id].isPurchased = dataLogic.shopItems[id];
                }
                
                upgrades = loadedData.upgrades;
                achievements = loadedData.achievements;
                missions = loadedData.missions;
                shopItems = loadedData.shopItems;
                storyData = loadedData.story;
        
                console.log("Todos los datos del juego han sido cargados y procesados.");
                return true;
        
            } catch (error) {
                console.error("Error fatal al cargar los datos del juego:", error);
                if (progressCallback) {
                    progressCallback(-1, 'ERROR: Fallo en la conexi√≥n con el servidor.');
                }
                return false;
            }
        }
        
        // ---- L√ìGICA DE GUARDADO, C√ÅLCULO Y PRINCIPAL ----
        let isResetting = false; 
        function saveGame() { 
        	if (isResetting) return; 
        	try { 
        		localStorage.setItem(SAVE_KEY, JSON.stringify(gameState)); 
        	} catch(e) {} 
        } 
        
        function loadGame() {
            try {
                const savedJSON = localStorage.getItem(SAVE_KEY);
                if (!savedJSON) return;
        
                const savedState = JSON.parse(savedJSON);
        
                if (savedState.version === GAME_VERSION) {
                    gameState = Object.assign({}, gameState, savedState);
        			gameState.settings = Object.assign({}, gameState.settings, savedState.settings);
                    return;
                }
        
                // Migraci√≥n de guardado
                console.warn(`Migrando partida guardada desde la versi√≥n ${savedState.version || 'antigua'} a ${GAME_VERSION}`);
                const migratedState = JSON.parse(JSON.stringify(gameState));
                migratedState.money = savedState.money || 0;
                migratedState.totalMoneyEver = savedState.totalMoneyEver || 0;
                migratedState.prestigePoints = savedState.prestigePoints || 0;
                if (savedState.settings) {
        			migratedState.settings = Object.assign({}, migratedState.settings, savedState.settings);
        		}
                for (const upgradeId in migratedState.upgradeLevels) {
                    if (savedState.upgradeLevels && savedState.upgradeLevels.hasOwnProperty(upgradeId)) {
                        migratedState.upgradeLevels[upgradeId] = savedState.upgradeLevels[upgradeId];
                    }
                }
                migratedState.version = GAME_VERSION;
                gameState = migratedState;
                saveGame();
                console.log("Migraci√≥n completada con √©xito.");
        
            } catch (e) {
                console.error("Error al cargar o migrar la partida guardada:", e);
            }
        }
        
        function resetSave() {
            const confirmationMessage = "¬øEst√°s seguro de que quieres borrar TODO tu progreso? Esta acci√≥n es irreversible.";
            if (confirm(confirmationMessage)) {
                isResetting = true;
                localStorage.clear();
                window.location.reload();
            }
        }
        
        function exportSave() {
            try {
                const saveData = btoa(JSON.stringify(gameState));
                navigator.clipboard.writeText(saveData).then(() => {
                    showNotification('¬°Exportado!', 'C√≥digo de guardado copiado.', 'üíæ');
                });
            } catch (error) {
                alert('Error al exportar la partida.');
            }
        }
        
        function importSave() {
            const importString = prompt("Pega tu c√≥digo de guardado aqu√≠:");
            if (!importString) return;
            try {
                const newState = JSON.parse(atob(importString));
                if (newState && newState.hasOwnProperty('money') && newState.hasOwnProperty('upgradeLevels')) {
                    localStorage.setItem(SAVE_KEY, JSON.stringify(newState));
                    showNotification('¬°Importado!', 'La partida se cargar√°...', 'üíæ');
                    setTimeout(() => window.location.reload(), 2000);
                } else {
                    alert('El c√≥digo de guardado parece ser inv√°lido.');
                }
            } catch (error) {
                alert('Error al importar la partida.');
            }
        }
        
        function findUpgradeById(upgradeId) {
            const currentEraUpgrades = upgrades[gameState.currentEra];
            if (!currentEraUpgrades) return null;
            for (const categoryId in currentEraUpgrades) {
                if (currentEraUpgrades[categoryId].items[upgradeId]) {
                    return currentEraUpgrades[categoryId].items[upgradeId];
                }
            }
            return null;
        }
        
        function findNextRequirementHurdle(upgradeId) {
            const upgrade = findUpgradeById(upgradeId);
            if (!upgrade || !upgrade.requirements || upgrade.requirements.length === 0) return null;
            const currentUpgradeLevel = gameState.upgradeLevels[upgradeId] || 0;
            const nextLevelToBuy = currentUpgradeLevel + 1;
            for (const hurdle of upgrade.requirements) {
                if (currentUpgradeLevel < hurdle.level) {
                    let allDependenciesMet = true;
                    for (const reqId in hurdle.reqs) {
                        if ((gameState.upgradeLevels[reqId] || 0) < hurdle.reqs[reqId]) {
                            allDependenciesMet = false;
                            break;
                        }
                    }
                    if (!allDependenciesMet) {
                        if (nextLevelToBuy < hurdle.level) return null;
                        return hurdle;
                    }
                }
            }
            return null;
        }
        
        function areRequirementsMet(upgradeId) {
            return findNextRequirementHurdle(upgradeId) === null;
        }
        
        function calculateUpgradeCost(upgradeId) {
            const upgrade = findUpgradeById(upgradeId);
            if (!upgrade) return Infinity;
            const level = gameState.upgradeLevels[upgradeId] || 0;
            return Math.floor(upgrade.baseCost * Math.pow(UPGRADE_COST_GROWTH_RATE, level));
        }
        
        function calculatePrestigePointsToGain() {
            let basePoints = Math.floor(Math.pow(gameState.totalMoneyEver / PRESTIGE_MONEY_FACTOR, PRESTIGE_POWER_FACTOR));
            let prestigeMultiplier = 1;
            gameState.shopUpgrades.forEach(itemId => {
                const item = shopItems[itemId];
                if (item && item.type === 'prestige_multiplier') prestigeMultiplier += item.value;
                if (item && item.type === 'all_multiplier') prestigeMultiplier += item.value;
            });
            const totalPoints = Math.floor(basePoints * prestigeMultiplier);
            return totalPoints > 0 ? totalPoints : 0;
        }
        
        function areAllMissionsCompletedForEra(eraId) {
            const eraMissions = missions[eraId];
            if (!eraMissions) return true; // Si no hay misiones para la era, se considera completado.
        
            const missionIds = Object.keys(eraMissions);
            for (const missionId of missionIds) {
                if (!gameState.completedMissions.includes(missionId)) {
                    return false; // Se encontr√≥ una misi√≥n sin completar.
                }
            }
            return true; // Todas las misiones fueron encontradas en el estado del jugador.
        }
        
        function areAllAchievementsUnlockedForEra(eraId) {
            const eraAchievements = achievements[eraId];
            if (!eraAchievements) return true;
        
            const achievementIds = Object.keys(eraAchievements);
            for (const achievementId of achievementIds) {
                if (!gameState.unlockedAchievements.includes(achievementId)) {
                    return false; // Se encontr√≥ un logro sin desbloquear.
                }
            }
            return true; // Todos los logros fueron encontrados en el estado del jugador.
        }
        
        function recalculateGains() {
            let baseDpc = 1, baseDps = 0, dpcMultiplier = 1, dpsMultiplier = 1;
        	const currentEraUpgrades = upgrades[gameState.currentEra];
            if (currentEraUpgrades) {
        		for (const categoryId in currentEraUpgrades) {
        			for (const id in currentEraUpgrades[categoryId].items) {
        				const u = currentEraUpgrades[categoryId].items[id];
        				const l = gameState.upgradeLevels[id] || 0;
        				if (l > 0) {
        					switch (u.type) {
        						case 'dpc': baseDpc += u.baseEffect * l; break;
        						case 'dps': baseDps += u.baseEffect * l; break;
        						case 'dpc_multiplier': dpcMultiplier += u.baseEffect * l; break;
        						case 'dps_multiplier': dpsMultiplier += u.baseEffect * l; break;
        					}
        				}
        			}
        		}
        	}
            let permanentDpsMultiplier = 1, permanentDpcMultiplier = 1, allMultiplier = 1;
            gameState.shopUpgrades.forEach(itemId => {
                const item = shopItems[itemId];
                if (item) {
                    if (item.type === 'dps_multiplier_permanent') permanentDpsMultiplier += item.value;
                    if (item.type === 'dpc_multiplier_permanent') permanentDpcMultiplier += item.value;
                    if (item.type === 'all_multiplier') allMultiplier += item.value;
                }
            });
            const prestigeMultiplier = 1 + (gameState.prestigePoints * PRESTIGE_BONUS_PER_POINT);
            gameState.moneyPerClick = (baseDpc * dpcMultiplier * permanentDpcMultiplier * allMultiplier) * prestigeMultiplier;
            gameState.moneyPerSecond = (baseDps * dpsMultiplier * permanentDpsMultiplier * allMultiplier) * prestigeMultiplier;
        }
        
        function buyUpgrade(upgradeId) {
        	const upgradeData = findUpgradeById(upgradeId);
            const currentLevel = gameState.upgradeLevels[upgradeId] || 0;
            if (upgradeData.maxLevel && currentLevel >= upgradeData.maxLevel) {
                playSound('buyFail');
                return; 
            }
            if (!areRequirementsMet(upgradeId)) {
                playSound('buyFail');
                return;
            }
            const cost = calculateUpgradeCost(upgradeId);
            if (gameState.money >= cost) {
                gameState.money -= cost;
                gameState.upgradeLevels[upgradeId]++;
                recalculateGains();
                updateUI();
                playSound('buySuccess');
            } else {
                playSound('buyFail');
            }
        }
        
        function buyShopItem(itemId) {
            const item = shopItems[itemId];
            if (item && gameState.gems >= item.cost && !item.isPurchased(gameState)) {
                gameState.gems -= item.cost;
                gameState.shopUpgrades.push(itemId);
                recalculateGains();
                updateUI();
                playSound('buySuccess');
            } else {
                playSound('buyFail');
            }
        }
        
        function addMoney(amount) { 
        	if(typeof amount === 'number' && !isNaN(amount)) { 
        		gameState.money += amount; 
        		gameState.totalMoneyEver += amount; 
        	} 
        }
        
        function generateMoneyOnClick() { 
        	gameState.totalClicks++;
        
            // Aplica el multiplicador de Frenes√≠ de Clics si est√° activo
            const clickMultiplier = gameState.activeBuffs.clickFrenzy.timeLeft > 0 ? CLICK_FRENZY_MULTIPLIER : 1;
            const moneyFromClick = gameState.moneyPerClick * clickMultiplier;
        
            // Se suma directamente al dinero para no ser afectado por otros buffs
        	gameState.money += moneyFromClick; 
        	gameState.totalMoneyEver += moneyFromClick;
        
            // ---- GESTI√ìN DE LA B√ìVEDA ----
            const currentEraNumber = parseInt(gameState.currentEra.replace('era', ''));
            if (currentEraNumber >= 2) {
                gameState.dataVault.clickCounter++;
                if (gameState.dataVault.clickCounter >= VAULT_CLICKS_TO_TRIGGER) {
                    addToVault();
                    gameState.dataVault.clickCounter = 0; // Resetea el contador
                }
            }
        }
        
        function addToVault() {
            let capacityBonus = 0;
            gameState.shopUpgrades.forEach(itemId => {
                const item = shopItems[itemId];
                if (item && item.type === 'vault_capacity') {
                    capacityBonus += item.value;
                }
            });
            const vaultCapacity = (gameState.moneyPerSecond || 1) * (VAULT_CAPACITY_DPS_MULTIPLIER + capacityBonus);
        
            if (gameState.dataVault.currentValue >= vaultCapacity) return;
        
            let fillerBonus = 1;
            gameState.shopUpgrades.forEach(itemId => {
                const item = shopItems[itemId];
                if (item && item.type === 'vault_filler') {
                    fillerBonus += item.value;
                }
            });
            const prestigeBonus = 1 + (gameState.prestigePoints * PRESTIGE_BONUS_PER_POINT);
            const clickValueForVault = gameState.moneyPerClick * VAULT_REWARD_CLICK_MULTIPLIER;
            const amountToAdd = (clickValueForVault * prestigeBonus) * fillerBonus; // [MODIFICADO]
        
            gameState.dataVault.currentValue += amountToAdd;
        
            if (gameState.dataVault.currentValue > vaultCapacity) {
                gameState.dataVault.currentValue = vaultCapacity;
            }
        }
        
        function openVault() {
            const now = Date.now();
            const cooldownEndTime = gameState.dataVault.cooldownTimestamp;
        
            // 1. Verificar si el cooldown de 1 hora ha pasado
            if (now < cooldownEndTime) {
                // Calcula el tiempo restante para mostrar un mensaje √∫til (opcional pero recomendado)
                const timeLeftSeconds = Math.round((cooldownEndTime - now) / 1000);
                const timeLeftMinutes = Math.ceil(timeLeftSeconds / 60);
                console.log(`La b√≥veda no est√° lista. Faltan aproximadamente ${timeLeftMinutes} minutos.`);
                playSound('buyFail'); // Sonido de error
                return; // Termina la funci√≥n si est√° en cooldown
            }
        
            // 2. Verificar si hay algo que recoger
            const amountToCollect = gameState.dataVault.currentValue;
            if (amountToCollect <= 0) {
                console.log("La b√≥veda est√° vac√≠a.");
                playSound('buyFail');
                return;
            }
        
            // 3. Otorgar la recompensa
            addMoney(amountToCollect);
        
            // 4. Resetear la b√≥veda y establecer el nuevo cooldown
            gameState.dataVault.currentValue = 0;
            gameState.dataVault.cooldownTimestamp = Date.now() + (VAULT_OPEN_COOLDOWN_SECONDS * 1000);
        
            // 5. Dar feedback al jugador
            showNotification("¬°B√≥veda Abierta!", `¬°Has recolectado ${formatNumber(amountToCollect)}!`, 'üè¶');
            playSound('buySuccess'); // Sonido de gran √©xito
        }
        
        async function prestigeReset() {
            const points = calculatePrestigePointsToGain();
            if (points <= 0) return;
        
            const shouldConfirm = gameState.settings.prestigeConfirmation !== false;
            if (!shouldConfirm || confirm(`¬øRelanzar para ganar ${points} Puntos de Innovaci√≥n?`)) {
                
                gameState.prestigePoints += points;
                const currentEraIndex = gameState.unlockedEras.indexOf(gameState.currentEra);
                const canAdvance = currentEraIndex < gameState.unlockedEras.length - 1;
                let newEraId = null;
        
                if (canAdvance) {
                    newEraId = gameState.unlockedEras[currentEraIndex + 1];
                }
        
                // --- TRANSICI√ìN VISUAL ---
                if (newEraId && typeof cinematics[newEraId] === 'function') {
                    await cinematics[newEraId]();
                } else {
                    const transitionOverlay = document.getElementById('transition-overlay');
                    transitionOverlay.classList.add('active');
                    await new Promise(resolve => setTimeout(resolve, 500));
                    transitionOverlay.classList.remove('active');
                }
        
                // --- [NUEVO] PASO 1: DETECTAR SI ES LA PRIMERA VEZ EN UNA NUEVA ERA ---
                let isFirstTimeInNewEra = false;
        
                // --- ACTUALIZACI√ìN DEL ESTADO DEL JUEGO (POST-TRANSICI√ìN) ---
                if (newEraId) {
                    // Comparamos la "era m√°s alta" guardada con la nueva era a la que estamos entrando
                    if (newEraId !== gameState.highestEraReached) {
                        isFirstTimeInNewEra = true;
                        gameState.highestEraReached = newEraId; // Actualizamos el progreso m√°ximo del jugador
                    }
                    
                    gameState.currentEra = newEraId;
                    showNotification("¬°Nueva Era!", `Bienvenido a ${ERA_DATA[gameState.currentEra].name}.`, '‚ú®');
                }
        
                gameState.money = 0;
                for (const key in gameState.upgradeLevels) {
                    gameState.upgradeLevels[key] = 0;
                }
        
                // --- [NUEVO] PASO 2: APLICAR EL CAPITAL SEMILLA SI CORRESPONDE ---
                if (isFirstTimeInNewEra) {
                    let seedCapital = 0;
                    switch (gameState.currentEra) {
                        case 'era2':
                            seedCapital = 1000000; // Capital inicial para la Era 2
                            break;
                        // case 'era3': 
                        //     seedCapital = 1e12; // Ejemplo para una futura Era 3
                        //     break;
                    }
        
                    if (seedCapital > 0) {
                        gameState.money += seedCapital;
                        showNotification("¬°Inversi√≥n Tecnol√≥gica!", `Comienzas con $${formatNumber(seedCapital)} para impulsar la nueva era.`, 'üöÄ');
                    }
                }
                
                // Se aplica el dinero de las mejoras de la tienda DESPU√âS del capital semilla
                gameState.shopUpgrades.forEach(itemId => {
                    const item = shopItems[itemId];
                    if (item) {
                        if (item.type === 'starting_money') gameState.money += item.value;
                        if (item.type === 'keep_upgrades') gameState.upgradeLevels[item.value.id] = item.value.levels;
                    }
                });
        
                gameState.totalMoneyEver = gameState.money; // El total ahora incluye el capital semilla
                recalculateGains();
                
                // --- RENDERIZADO FINAL Y VISUALIZACI√ìN ---
                showScreen('game-container'); 
        
                loadEraStyle(gameState.currentEra);
                stopAllEraMusic();
                playEraMusic(gameState.currentEra);
                renderUpgrades();
                renderAchievements();
                renderMissions();
                updateUI();
                saveGame();
            }
        }
        
        function evolveToNextEra() {
            let nextEraId = null;
            // Busca la primera era en ERA_DATA que a√∫n no ha sido desbloqueada.
            for (const eraId in ERA_DATA) {
                if (!gameState.unlockedEras.includes(eraId)) {
                    nextEraId = eraId;
                    break;
                }
            }
        
            // Si encontramos una era para desbloquear...
            if (nextEraId) {
                const nextEra = ERA_DATA[nextEraId];
                // Verificamos por segunda vez que se tengan los puntos (seguridad).
                if (gameState.prestigePoints >= nextEra.prestigeCost) {
                    // 1. Restamos el coste.
                    gameState.prestigePoints -= nextEra.prestigeCost;
        
                    // 2. A√±adimos la nueva era a la lista de desbloqueadas.
                    gameState.unlockedEras.push(nextEraId);
        
                    // 3. Informamos al jugador del √©xito.
                    playSound('buySuccess');
                    showNotification('¬°Evoluci√≥n Desbloqueada!', `Avanza a la ${nextEra.name} en tu pr√≥ximo relanzamiento.`, '‚ú®');
                    
                    // 4. Actualizamos la UI para que el bot√≥n desaparezca o cambie.
                    updateUI();
                }
            }
        }
        
        function checkAchievements() {
            const eraAchievements = achievements[gameState.currentEra];
            if (!eraAchievements) return;
        
            for (const achievementId in eraAchievements) {
                if (!gameState.unlockedAchievements.includes(achievementId)) {
                    const achievement = eraAchievements[achievementId];
                    if (achievement.check(gameState)) {
                        console.log(`Logro desbloqueado: ${achievement.name}`);
                        gameState.unlockedAchievements.push(achievementId);
                        gameState.gems += achievement.reward.gems;
                        playSound('buySuccess');
                        showNotification(`¬°Logro Desbloqueado!`, `${achievement.name}`, 'üèÜ');
        				renderAchievements(); 
                    }
                }
            }
        }
        
        function checkMissions() {
            const eraMissions = missions[gameState.currentEra];
            if (!eraMissions) return;
        
            for (const missionId in eraMissions) {
                if (!gameState.completedMissions.includes(missionId)) {
                    const mission = eraMissions[missionId];
                    const isUnlocked = !mission.requires || gameState.completedMissions.includes(mission.requires);
                    if (isUnlocked && mission.check(gameState)) {
                        console.log(`Misi√≥n completada: ${mission.name}`);
                        gameState.completedMissions.push(missionId);
                        gameState.gems += mission.reward.gems;
                        playSound('buySuccess');
                        showNotification(`¬°Misi√≥n Completada!`, `+${mission.reward.gems} üíé por "${mission.name}"`, 'üìã');
        				renderMissions();
                    }
                }
            }
        }
        
        // ---- BUCLE DEL JUEGO ----
        let gameLoopInterval = null; 
        function gameLoop() { 
            const deltaTime = 0.1; // El bucle se ejecuta cada 100ms (0.1s)
        
            // ---- L√ìGICA DE TEMPORIZADORES (POPUPS Y BUFFS) ----
            const currentEraNumber = parseInt(gameState.currentEra.replace('era', ''));
            if (currentEraNumber >= 2) {
                if (gameState.nextPopupTimestamp === 0) {
                    scheduleNextPopup();
                }
                if (Date.now() >= gameState.nextPopupTimestamp) {
                    triggerPopup();
                    scheduleNextPopup();
                }
            }
        
            for (const buffKey in gameState.activeBuffs) {
                const buff = gameState.activeBuffs[buffKey];
                if (buff.timeLeft > 0) {
                    buff.timeLeft -= deltaTime;
                } else if (buff.timeLeft < 0) {
                    buff.timeLeft = 0;
                }
            }
        
            // ---- C√ÅLCULO DE GANANCIAS ----
            // Auto-clickers
            let clicksPerSecond = 0;
            gameState.shopUpgrades.forEach(itemId => {
                const item = shopItems[itemId];
                if (item && item.type === 'auto_clicker') {
                    clicksPerSecond += item.value;
                }
            });
            if (clicksPerSecond > 0) {
                // La ganancia de los auto-clickers tambi√©n se beneficia del Frenes√≠ de Clics
                const autoClickMultiplier = gameState.activeBuffs.clickFrenzy.timeLeft > 0 ? CLICK_FRENZY_MULTIPLIER : 1;
                const autoClickGain = (gameState.moneyPerClick * autoClickMultiplier) * (clicksPerSecond * deltaTime);
                addMoney(autoClickGain);
            }
            
            // Ganancias pasivas (DPS)
            const dpsMultiplier = gameState.activeBuffs.dpsOverload.timeLeft > 0 ? DPS_OVERLOAD_MULTIPLIER : 1;
            const passiveGain = (gameState.moneyPerSecond * dpsMultiplier) * deltaTime; // Se multiplica por deltaTime (0.1)
            addMoney(passiveGain);
        
            // ---- ACTUALIZACIONES FINALES ----
            checkAchievements();
            checkMissions();
            updateUI(); 
        }
        
        // Esta funci√≥n calcula y establece cu√°ndo aparecer√° el pr√≥ximo Pop-up.
        function scheduleNextPopup() {
            let frequencyMultiplier = 1;
            gameState.shopUpgrades.forEach(itemId => {
                const item = shopItems[itemId];
                if (item && item.type === 'popup_frequency') {
                    frequencyMultiplier += item.value;
                }
            });
        
            const minSeconds = POPUP_MIN_SECONDS / frequencyMultiplier;
            const maxSeconds = POPUP_MAX_SECONDS / frequencyMultiplier;
        
            const randomIntervalSeconds = Math.random() * (maxSeconds - minSeconds) + minSeconds;
            gameState.nextPopupTimestamp = Date.now() + randomIntervalSeconds * 1000;
            console.log(`Pr√≥ximo pop-up programado en ${Math.round(randomIntervalSeconds)} segundos.`);
        }
        
        // 1. Decide qu√© pop-up mostrar y llama a la UI para renderizarlo
        function triggerPopup() {
            // Evita que aparezcan pop-ups si ya hay un buff activo para no solaparlos
            const buffs = gameState.activeBuffs;
            if (buffs.clickFrenzy.timeLeft > 0 || buffs.dpsOverload.timeLeft > 0) {
                console.log("Se omiti√≥ un pop-up porque ya hay un beneficio activo.");
                return; 
            }
        
            const popupTypes = ['jackpot', 'clickFrenzy', 'dpsOverload'];
            const randomType = popupTypes[Math.floor(Math.random() * popupTypes.length)];
            
            // Llamamos a una funci√≥n de la UI que crearemos en el Sprint 2
            renderPopup(randomType);
            console.log(`¬°Pop-up de tipo "${randomType}" activado!`);
        }
        
        // 2. Aplica los efectos cuando el jugador hace clic en el pop-up
        function applyJackpot() {
        	gameState.stats.popupsClicked++;
            // Calcula la recompensa bas√°ndose en el DPS base (sin multiplicadores de buffs)
            const baseDps = gameState.moneyPerSecond; // No necesitamos dividir, ya que el buff se aplica en el gameLoop
            const reward = baseDps * JACKPOT_DPS_EQUIVALENT;
            addMoney(reward);
            
            // Muestra una notificaci√≥n visual
            showNotification("¬°Jackpot!", `+${formatNumber(reward)}`, 'üí∞');
            playSound('buySuccess');
        }
        
        function applyClickFrenzy() {
            let durationBonus = 0;
            gameState.shopUpgrades.forEach(itemId => {
                const item = shopItems[itemId];
                if (item && item.type === 'buff_duration' && item.value.buff === 'clickFrenzy') {
                    durationBonus += item.value.seconds;
                }
            });
            
            gameState.activeBuffs.clickFrenzy.timeLeft = CLICK_FRENZY_DURATION_SECONDS + durationBonus; // [MODIFICADO]
            gameState.stats.clickFrenziesActivated++;
            
            showNotification("¬°Frenes√≠ de Clics!", `¬°Valor de clics x${CLICK_FRENZY_MULTIPLIER} por ${CLICK_FRENZY_DURATION_SECONDS + durationBonus}s!`, 'üñ±Ô∏èüí®');
            playSound('buySuccess');
        }
        
        function applyDpsOverload() {
        	gameState.stats.popupsClicked++;
        	gameState.stats.dpsOverloadsActivated++;
            gameState.activeBuffs.dpsOverload.timeLeft = DPS_OVERLOAD_DURATION_SECONDS;
        
            showNotification("¬°Sobrecarga de Red!", `¬°DPS x${DPS_OVERLOAD_MULTIPLIER} por ${DPS_OVERLOAD_DURATION_SECONDS}s!`, 'üìà');
            playSound('buySuccess');
        }
        
        // ---- GESTOR DE PANTALLAS Y PESTA√ëAS ----
        const allScreens = document.querySelectorAll('.full-screen, .game-container');
        const allTabPanels = document.querySelectorAll('.tab-panel');
        function showScreen(screenId) { allScreens.forEach(s => s.classList.add('hidden')); document.getElementById(screenId).classList.remove('hidden'); }
        function showTab(tabId) {
            allTabPanels.forEach(p => p.classList.remove('active'));
            document.getElementById(tabId).classList.add('active');
            document.querySelectorAll('.tab-btn').forEach(b => {
                b.classList.toggle('active', b.dataset.tab === tabId);
            });
        }
        function returnToMainMenu() {
            if (gameLoopInterval) {
                clearInterval(gameLoopInterval);
                gameLoopInterval = null;
            }
            saveGame();
        	document.getElementById('game-container').classList.remove('popup-visible');
            showScreen('main-menu-screen');
            stopAllEraMusic();
        
            if (!isSoundPlaying('titleMusic')) {
                playSound('titleMusic');
                // El volumen se establece al cargar por primera vez en getSound(),
                // pero podemos asegurarlo aqu√≠ tambi√©n si es necesario.
                const sound = getSound('titleMusic');
                if(sound) sound.volume(gameState.settings.musicVolume);
            }
            // El fade necesita el volumen actual. getSound() nos da acceso a la instancia cargada.
            const currentTitleMusic = getSound('titleMusic');
            if (currentTitleMusic) {
                fadeSound('titleMusic', currentTitleMusic.volume(), gameState.settings.musicVolume, 1500);
            }
        }
        
        // ---- L√ìGICA DE INICIALIZACI√ìN ----
        let inGameListenersInitialized = false;
        
        function initializeInGameEventListeners() {
            if (inGameListenersInitialized) return;
            document.getElementById('game-tab-bar').addEventListener('click', (event) => {
                const navButton = event.target.closest('.tab-btn');
                if (navButton) showTab(navButton.dataset.tab);
            });
        	document.getElementById('close-popup-button').addEventListener('click', (event) => {
        		event.stopPropagation();
        		document.getElementById('game-container').classList.remove('popup-visible');
        	});
            document.getElementById('main-click-button').addEventListener('click', (event) => {
                generateMoneyOnClick();
                showFloatingNumber(event);
                playSound('click');
            });
            document.getElementById('upgrades-container').addEventListener('click', (event) => {
                const button = event.target.closest('.buy-button');
                if (!button || button.classList.contains('is-disabled')) {
                    playSound('buyFail');
                    return;
                }
                buyUpgrade(button.dataset.upgradeId);
            });
            document.getElementById('evolution-tab').addEventListener('click', (event) => {
                const button = event.target.closest('button');
                if (!button) return; // Si el clic no fue en un bot√≥n, no hacemos nada.
        
                // Comprobamos el ID del bot√≥n presionado
                if (button.id === 'relaunch-button') {
                    if (button.classList.contains('is-disabled')) {
                        playSound('buyFail');
                    } else {
                        prestigeReset();
                    }
                } else if (button.id === 'evolve-era-button') {
                    if (button.classList.contains('is-disabled')) {
                        playSound('buyFail');
                    } else {
                        evolveToNextEra();
                    }
                }
            });
        	document.getElementById('shop-tab').addEventListener('click', (event) => {
                const button = event.target.closest('.buy-shop-item-button');
                if (button && !button.disabled) buyShopItem(button.dataset.itemId);
            });
        	document.getElementById('top-shortcut-bar').addEventListener('click', (event) => {
        		const shortcutButton = event.target.closest('.shortcut-btn');
        		if (!shortcutButton) return;
        		if (shortcutButton.id === 'menu-button-shortcut') returnToMainMenu();
        		else if (shortcutButton.dataset.tab) showTab(shortcutButton.dataset.tab);
        	});
            inGameListenersInitialized = true;
        }
        
        function startGame() {
            showScreen('game-container');
            showTab('main-tab');
            initializeInGameEventListeners();
            loadGame();
        	loadEraStyle(gameState.currentEra);
            
        	stopSound('titleMusic');
        
            playEraMusic(gameState.currentEra);
            recalculateGains();
            renderUpgrades();
        	renderAchievements();
        	renderMissions();
        	initializeShop();
            if(gameLoopInterval) clearInterval(gameLoopInterval);
            gameLoopInterval = setInterval(gameLoop, 100);
        	
            const tutorialShown = localStorage.getItem('tutorialShown');
            if (!tutorialShown) {
                startInteractiveTutorial();
                localStorage.setItem('tutorialShown', 'true');
            }
        }
        
        function loadEraStyle(eraId) {
            const styleLink = document.getElementById('era-style');
            if (styleLink && eraId) {
                const eraNumber = eraId.replace('era', ''); 
                styleLink.href = `css/eras/era-${eraNumber}g.css`; 
            }
        }
        
        function playEraMusic(eraId) {
            const musicName = `${eraId}Music`;
            if (!isSoundPlaying(musicName)) {
                playSound(musicName);
                const sound = getSound(musicName);
                if(sound) sound.volume(gameState.settings.musicVolume);
            }
        }
        
        function stopAllEraMusic() {
            stopSound('era1Music');
            stopSound('era2Music');
            // A√±adir futuras m√∫sicas de era aqu√≠...
            // stopSound('era3Music');
        }
        
        // ---- SECUENCIA DE ARRANQUE GENERAL ----
        window.addEventListener('load', async () => {
            const loadingScreen = document.getElementById('loading-screen');
            const loadingContent = loadingScreen.querySelector('.loading-content');
            const progressBar = document.getElementById('progress-bar');
            const statusText = document.getElementById('loading-status-text');
            showScreen('loading-screen');
        
            const MIN_LOADING_TIME_MS = 2500; // 2.5 segundos de tiempo m√≠nimo visible
            const loadDataPromise = loadGameData();
            const minimumTimePromise = new Promise(resolve => setTimeout(resolve, MIN_LOADING_TIME_MS));
            let visualProgress = 0;
            const progressInterval = setInterval(() => {
                if (visualProgress < 99) {
                    visualProgress++;
                    progressBar.style.width = `${visualProgress}%`;
                }
            }, MIN_LOADING_TIME_MS / 100);
        
            const [dataLoadedResult] = await Promise.all([loadDataPromise, minimumTimePromise]);
            clearInterval(progressInterval);
        
            if (!dataLoadedResult) {
                statusText.textContent = 'ERROR: Fallo en la conexi√≥n.';
                progressBar.style.backgroundColor = '#D32F2F'; // Barra roja
                progressBar.style.width = '100%'; // Llena la barra de error
                return;
            }
        
            progressBar.style.width = '100%';
            statusText.textContent = '¬°Conexi√≥n establecida! Sistema listo.';
            loadGame();
            initializeVolumes(gameState.settings.musicVolume, gameState.settings.sfxVolume);
        
            setTimeout(() => {
                loadingContent.classList.add('fade-out');
                setTimeout(() => {
                    const tapToStartScreen = document.getElementById('tap-to-start-screen');
                    showScreen('tap-to-start-screen');
                    tapToStartScreen.addEventListener('click', () => {
                        showScreen('main-menu-screen');
                        playSound('titleMusic');
                        fadeSound('titleMusic', 0, gameState.settings.musicVolume, 2000);
                    }, { once: true });
                }, 1000);
            }, 800);
        	
        	document.getElementById('play-button').addEventListener('click', () => {
        		fadeSound('titleMusic', gameState.settings.musicVolume, 0, 1000);
        		const introHasBeenShown = localStorage.getItem('introShown');
        		if (!introHasBeenShown) {
        			localStorage.setItem('introShown', 'true');
        			startIntroAnimation(startGame); 
        		} else {
        			startGame();
        		}
        	});
        
        	// ---- Listeners para la pantalla de HISTORIA ----
        	document.getElementById('story-button').addEventListener('click', () => {
        		showScreen('story-screen');
        		currentStoryIndex = 0;
        		renderStoryCard(currentStoryIndex);
        	});
        	document.getElementById('story-next-button').addEventListener('click', () => {
        		currentStoryIndex++;
        		if (currentStoryIndex >= storyData.length) {
        			currentStoryIndex = 0;
        		}
        		renderStoryCard(currentStoryIndex);
        		playSound('menuHover');
        	});
        	document.getElementById('story-prev-button').addEventListener('click', () => {
        		currentStoryIndex--;
        		if (currentStoryIndex < 0) {
        			currentStoryIndex = storyData.length - 1;
        		}
        		renderStoryCard(currentStoryIndex);
        		playSound('menuHover');
        	});
        
        	// ---- Listeners para la pantalla de CR√âDITOS ----
        	document.getElementById('credits-button').addEventListener('click', () => {
        		showScreen('credits-screen');
        		startCreditsSequence();
        	});
        	document.getElementById('credits-back-button').addEventListener('click', () => {
        		stopCreditsSequence();
        		showScreen('main-menu-screen');
        	});
        
        	// ---- Listeners para la nueva pantalla de OPCIONES ----
        	const musicSlider = document.getElementById('music-volume');
        	const sfxSlider = document.getElementById('sfx-volume');
        	const prestigeToggle = document.getElementById('prestige-confirmation-toggle');
        
        	document.getElementById('options-button-menu').addEventListener('click', () => {
        		// Sincroniza la UI con el estado actual cada vez que se abre
        		musicSlider.value = gameState.settings.musicVolume;
        		sfxSlider.value = gameState.settings.sfxVolume;
        		prestigeToggle.checked = gameState.settings.prestigeConfirmation;
        		showScreen('options-screen');
        	});
        
        	musicSlider.addEventListener('input', (event) => {
        		const newVolume = parseFloat(event.target.value);
        		gameState.settings.musicVolume = newVolume;
        		setMusicVolume(newVolume);
        	});
        
        	sfxSlider.addEventListener('input', (event) => {
        		const newVolume = parseFloat(event.target.value);
        		gameState.settings.sfxVolume = newVolume;
        		setSfxVolume(newVolume);
        	});
        
        	prestigeToggle.addEventListener('change', (event) => {
        		gameState.settings.prestigeConfirmation = event.target.checked;
        	});
        
        	document.getElementById('export-save-button').addEventListener('click', exportSave);
        	document.getElementById('import-save-button').addEventListener('click', importSave);
        	document.getElementById('reset-save-button').addEventListener('click', resetSave);
        
        	// ---- Listeners generales de la aplicaci√≥n ----
        
        	// Listener para todos los botones "Volver" gen√©ricos (excluyendo el de cr√©ditos)
        	document.querySelectorAll('.back-button:not(#credits-back-button)').forEach(button => {
        		button.addEventListener('click', () => showScreen('main-menu-screen'));
        	});
        	
        	// Listener para los efectos de sonido al pasar el rat√≥n
        	const hoverSoundSelectors = [
        		'.menu-button',
        		'.back-button',
        		'.danger-button',
        		'.shortcut-btn',
        		'.tab-btn',
        		'#close-popup-button',
        		'.data-button',
        		'.story-nav-button'
        	].join(',');
        
        	document.body.addEventListener('mouseover', (event) => {
        		const targetButton = event.target.closest(hoverSoundSelectors);
        		if (targetButton) {
        			playSound('menuHover');
        		}
        	});
        	
        	// Listener para el guardado al cerrar la p√°gina
        	window.addEventListener('beforeunload', saveGame);
        });
        
        // ==================================================================
        //               FUNCIONES DE DESARROLLO (CHEAT CODES)
        //      (Eliminar o comentar antes de subir a producci√≥n)
        // ==================================================================
        
        /**
         * Funci√≥n de trampa para desbloquear instant√°neamente la Era 2.
         * Otorga los puntos de prestigio necesarios y completa todos los
         * logros y misiones de la Era 1.
         */
        function dev_unlockEra2() {
            // 1. Otorga los puntos de prestigio necesarios
            const requiredPrestige = 100;
            if (gameState.prestigePoints < requiredPrestige) {
                gameState.prestigePoints = requiredPrestige;
                console.log(`DEV: Se han establecido los Puntos de Innovaci√≥n a ${requiredPrestige}.`);
            }
        
            // 2. Completa todas las misiones de la Era 1
            const era1Missions = Object.keys(missions.era1);
            era1Missions.forEach(missionId => {
                if (!gameState.completedMissions.includes(missionId)) {
                    gameState.completedMissions.push(missionId);
                }
            });
            console.log('DEV: Todas las misiones de la Era 1 han sido completadas.');
        
            // 3. Desbloquea todos los logros de la Era 1
            const era1Achievements = Object.keys(achievements.era1);
            era1Achievements.forEach(achievementId => {
                if (!gameState.unlockedAchievements.includes(achievementId)) {
                    gameState.unlockedAchievements.push(achievementId);
                }
            });
            console.log('DEV: Todos los logros de la Era 1 han sido desbloqueados.');
        
            // 4. Actualiza la interfaz de usuario para reflejar los cambios
            updateUI();
            renderMissions(); // Vuelve a renderizar para que aparezcan como completadas
            renderAchievements(); // Vuelve a renderizar para que aparezcan como desbloqueados
        
            // 5. Mensaje de confirmaci√≥n
            const message = "¬°DESBLOQUEO DE ERA 2 LISTO! El bot√≥n 'Evolucionar' ya deber√≠a estar activo en la pesta√±a de Evoluci√≥n.";
            console.log(`%c${message}`, 'color: #00FF00; font-weight: bold; font-size: 14px;');
            
            // Opcional: Notificaci√≥n en el juego
            showNotification('¬°Modo Dios!', 'Requisitos de la Era 2 cumplidos.', 'üëë');
        }
        ---------- FIN CONTENIDO ----------

        üìÑ Archivo: ui.js
        ---------- CONTENIDO ----------
        const sleep = (ms) => new Promise(resolve => setTimeout(resolve, ms));
        let activePopupElement = null; // Para rastrear el elemento del pop-up en la UI
        let popupTimeoutId = null;     // Para rastrear el temporizador que lo oculta
        
        // ---- ELEMENTOS DE LA INTERFAZ (UI ELEMENTS) ----
        const moneyDisplay = document.getElementById('money-display');
        const dpsDisplay = document.getElementById('dps-display');
        const dpcDisplay = document.getElementById('dpc-display');
        const upgradesContainer = document.getElementById('upgrades-container');
        const prestigePointsDisplay = document.getElementById('prestige-points-display');
        const relaunchButton = document.getElementById('relaunch-button'); // CONSTANTE NUEVA
        
        function formatNumber(number) { if (Math.abs(number) < 1000) return number.toFixed(0); const suffixes = ["", "k", "M", "B", "T", "Qa", "Qi", "Sx", "Sp", "Oc"]; const tier = Math.floor(Math.log10(Math.abs(number)) / 3); if (tier >= suffixes.length) return number.toExponential(2).replace('+', ''); const suffix = suffixes[tier]; const scale = Math.pow(10, tier * 3); const scaled = number / scale; return scaled.toFixed(2) + suffix; }
        function showFloatingNumber(event) {
            const container = document.querySelector('.main-click-area');
            if (!container) return; // Si no encuentra el contenedor, no hace nada para evitar errores.
        
            const floatingNumber = document.createElement('span');
            floatingNumber.className = 'floating-number';
            floatingNumber.textContent = `+$${formatNumber(gameState.moneyPerClick)}`;
            floatingNumber.style.left = `${event.pageX - container.getBoundingClientRect().left}px`;
            floatingNumber.style.top = `${event.pageY - container.getBoundingClientRect().top}px`;
            container.appendChild(floatingNumber);
            setTimeout(() => {
                floatingNumber.remove();
            }, 1000);
        }
        
        function renderUpgrades() {
            // Los iconos ahora incluyen las nuevas mejoras que hemos a√±adido.
            const icons = {
                // --- Era 1 ---
                'lineaCobre': 'üîó',
                'antenaRepetidora': 'üì°',
                'centralitaAnaloga': 'üè¢',
                'centralitaDigital': 'ü§ñ',
                'fibraOptica': '‚ú®',
                'kitHerramientas': 'üõ†Ô∏è',
                'tecladoTonos': '‚å®Ô∏è',
                'modem2400': 'üì†',
                'tarjetaRed': 'üîå',
                'softwareTerminal': 'üë®‚Äçüíª',
                'servidorBBS': 'üíæ',
                'protocoloTCPIP': 'üåê',
                'tecnicoJunior': 'üë∑',
                'marketingLocal': 'üì∞',
                'capacitacion': 'üéì',
        
                // --- Era 2 ---
                'modem56k': 'üìû',
                'torreGSM': 'üóº',
                'ispDatacenter': 'üéõÔ∏è',
                'redISDN': 'üìü',
                'backboneFibra': 'üåç',
                'htmlBasico': '‚úçÔ∏è',
                'cgiScripts': '‚öôÔ∏è',
                'servidorEmail': 'üìß',
                'portalWeb': 'üì∞',
                'bannerPublicitario': 'üìà',
                'algoritmoCompresion': 'üì¶',
                'centroSMS': 'üí¨',
                'roamingAcuerdo': 'ü§ù',
                'tonosPolifonicos': 'üéµ',
                'tarjetaPrepago': 'üí≥'
            };
        
            let html = '';
        	const currentEraUpgrades = upgrades[gameState.currentEra];
            if (!currentEraUpgrades) {
                upgradesContainer.innerHTML = "<p>No hay mejoras disponibles en esta era.</p>";
                return;
            }
            // El primer bucle itera sobre las CATEGOR√çAS (ej. 'infraestructura', 'equipamiento').
            for (const categoryId in currentEraUpgrades) {
                const category = currentEraUpgrades[categoryId];
                
                // A√±adimos un encabezado H3 para cada categor√≠a.
                html += `<h3 class="category-header">${category.name}</h3>`;
        
                // El segundo bucle (anidado) itera sobre las MEJORAS dentro de esa categor√≠a.
                for (const upgradeId in category.items) {
                    const upgrade = category.items[upgradeId];
                    // Generamos el HTML para cada mejora, igual que antes.
                    // Hemos a√±adido un ID al div contenedor principal para poder seleccionarlo m√°s tarde.
                    html += `
                        <div class="upgrade" id="upgrade-container-${upgradeId}">
                            <div class="upgrade-icon">${icons[upgradeId] || '‚öôÔ∏è'}</div>
                            <div class="upgrade-info">
                                <h4>${upgrade.name} (Nivel <span id="level-${upgradeId}">0</span>)</h4>
                                <p>${upgrade.description}</p>
                                <strong class="upgrade-gain" id="gain-${upgradeId}"></strong>
                            </div>
                            <button id="buy-${upgradeId}" class="buy-button" data-upgrade-id="${upgradeId}">
                                $<span id="cost-${upgradeId}">0</span>
                            </button>
                        </div>`;
                }
            }
            // Finalmente, inyectamos todo el HTML generado en el contenedor.
            upgradesContainer.innerHTML = html;
        }
        
        function renderAchievements() {
            const container = document.getElementById('achievements-container');
            if (!container) return;
        
            // [NUEVO] Obtenemos los datos de la era actual de forma din√°mica.
            const eraAchievements = achievements[gameState.currentEra];
            if (!eraAchievements) {
                container.innerHTML = '<p>No hay logros disponibles para esta era.</p>';
                return;
            }
        
            let html = '';
            
            // Iteramos sobre los logros de la era actual
            for (const achievementId in eraAchievements) {
                const achievement = eraAchievements[achievementId];
                const isUnlocked = gameState.unlockedAchievements.includes(achievementId);
                
                html += `
                    <div class="achievement ${isUnlocked ? 'unlocked' : ''}">
                        <div class="achievement-icon">${isUnlocked ? 'üèÜ' : '‚ùì'}</div>
                        <div class="achievement-info">
                            <h4>${achievement.name}</h4>
                            <p>${achievement.description}</p>
                        </div>
                        <div class="achievement-reward">
                            <span>+${achievement.reward.gems} üíé</span>
                        </div>
                    </div>
                `;
            }
            container.innerHTML = html;
        }
        
        function renderMissions() {
            const container = document.getElementById('missions-container');
            if (!container) return;
        
            // [NUEVO] Obtenemos los datos de la era actual de forma din√°mica.
            const eraMissions = missions[gameState.currentEra];
            if (!eraMissions) {
                container.innerHTML = '<p>No hay misiones disponibles para esta era.</p>';
                return;
            }
        
            let currentPhase = 1;
            let allMissionsCompleted = true;
        
            // 1. Determinar la fase actual del jugador
            for (const missionId in eraMissions) {
                const mission = eraMissions[missionId];
                if (!gameState.completedMissions.includes(missionId)) {
                    allMissionsCompleted = false;
                    currentPhase = mission.phase;
                    break;
                }
                currentPhase = mission.phase;
            }
            
            if (allMissionsCompleted) {
                // Busca la √∫ltima misi√≥n para obtener la √∫ltima fase
                const missionIds = Object.keys(eraMissions);
                if (missionIds.length > 0) {
                    currentPhase = eraMissions[missionIds[missionIds.length - 1]].phase;
                }
            }
        
            // 2. Construir el HTML
            let html = '';
            const phaseNames = ["FASE 1: EL INICIO", "FASE 2: EXPANSI√ìN INICIAL", "FASE 3: LA ERA DIGITAL", "FASE 4: PREPARANDO EL FUTURO"];
            
            // Asegurarse de que no intentamos acceder a un √≠ndice de phaseNames que no existe
            const phaseTitle = phaseNames[currentPhase - 1] || `FASE ${currentPhase}`;
            html += `<h3 class="mission-phase-title">${phaseTitle}</h3>`;
        
            for (const missionId in eraMissions) {
                const mission = eraMissions[missionId];
        
                if (mission.phase === currentPhase) {
                    const isCompleted = gameState.completedMissions.includes(missionId);
                    
                    html += `
                        <div class="mission ${isCompleted ? 'completed' : ''}">
                            <div class="mission-icon">${isCompleted ? '‚úÖ' : 'üìã'}</div>
                            <div class="mission-info">
                                <h4>${mission.name}</h4>
                                <p>${mission.description}</p>
                            </div>
                            <div class="mission-reward">
                                <span>+${mission.reward.gems} üíé</span>
                            </div>
                        </div>
                    `;
                }
            }
            
            if (allMissionsCompleted) {
                 html += '<p style="text-align: center; color: #99FF99; margin-top: 20px;">¬°Has completado todas las misiones de esta Era!</p>';
            }
        
            container.innerHTML = html;
        }
        
        // FUNCI√ìN 1: Se ejecuta UNA SOLA VEZ para construir la estructura de la tienda.
        function initializeShop() {
            const container = document.getElementById('shop-container');
            if (!container) return;
        
            let html = '';
            for (const itemId in shopItems) {
                const item = shopItems[itemId];
        
                // La clave es a√±adir IDs √∫nicos a los elementos que necesitaremos actualizar despu√©s.
                html += `
                    <div class="shop-item" id="shop-item-${itemId}">
                        <h4>${item.name}</h4>
                        <p>${item.description}</p>
                        <button class="buy-shop-item-button" id="buy-shop-item-${itemId}" data-item-id="${itemId}">
                            <!-- El texto del bot√≥n se actualizar√° din√°micamente -->
                        </button>
                    </div>
                `;
            }
            container.innerHTML = html;
        }
        
        // FUNCI√ìN 2: Se ejecuta en CADA CICLO para actualizar los elementos existentes.
        function updateShopUI() {
            const gemsDisplay = document.getElementById('shop-gems-display');
            if (!gemsDisplay) return;
        
            gemsDisplay.textContent = gameState.gems;
        
            for (const itemId in shopItems) {
                const item = shopItems[itemId];
                const container = document.getElementById(`shop-item-${itemId}`);
                const button = document.getElementById(`buy-shop-item-${itemId}`);
        
                // Si los elementos no existen, no hagas nada (salida segura)
                if (!container || !button) continue;
        
                const canAfford = gameState.gems >= item.cost;
                const isPurchased = item.isPurchased(gameState);
        
                // Actualiza la clase del contenedor
                container.classList.toggle('purchased', isPurchased);
        
                if (isPurchased) {
                    button.textContent = 'Comprado ‚úîÔ∏è';
                    button.disabled = true;
                } else {
                    button.textContent = `Coste: ${item.cost} üíé`;
                    button.disabled = !canAfford;
                }
            }
        }
        
        // ---- FUNCI√ìN PRINCIPAL DE ACTUALIZACI√ìN DE UI ----
        function updateUI() {
            // === Actualizaci√≥n de Recursos Principales ===
            moneyDisplay.textContent = `Capital: $${formatNumber(gameState.money)}`;
            dpsDisplay.textContent = `Flujo de Red: +$${formatNumber(gameState.moneyPerSecond)}/s`;
            dpcDisplay.textContent = `Ancho de Banda: +$${formatNumber(gameState.moneyPerClick)}/conexi√≥n`;
        
        	updateActiveBuffsUI();
        
            // === Actualizaci√≥n de Puntos de Innovaci√≥n y Era Actual ===
            const bonus = gameState.prestigePoints * 2;
            prestigePointsDisplay.textContent = `Puntos de Innovaci√≥n: ${gameState.prestigePoints} (+${bonus}%)`;
            
        	const eraNameDisplay = document.getElementById('current-era-name');
            const eraDescriptionDisplay = document.getElementById('current-era-description');
            const currentEraData = ERA_DATA[gameState.currentEra];
        
            if (currentEraData) {
                eraNameDisplay.textContent = currentEraData.name;
                eraDescriptionDisplay.textContent = currentEraData.description;
            }
        	
            // === L√≥gica para el bot√≥n de Relanzamiento (Prestigio) ===
            const pointsToGain = calculatePrestigePointsToGain();
            if (pointsToGain > 0) {
                relaunchButton.classList.remove('is-disabled');
                relaunchButton.textContent = `Relanzar por ${pointsToGain} Puntos`;
                relaunchButton.classList.add('can-afford-glow');
            } else {
                relaunchButton.classList.add('is-disabled');
                relaunchButton.textContent = 'Relanzar';
                relaunchButton.classList.remove('can-afford-glow');
            }
        	
        	const evolveButton = document.getElementById('evolve-era-button');
        	const evolutionRequirements = document.getElementById('era-evolution-requirements');
        	const evolutionStatus = document.getElementById('era-evolution-status');
        	let nextEraId = null;
        
        	for (const eraId in ERA_DATA) {
        		if (!gameState.unlockedEras.includes(eraId)) {
        			nextEraId = eraId;
        			break;
        		}
        	}
        
        	if (nextEraId) {
        		const nextEra = ERA_DATA[nextEraId];
        		if (gameState.currentEra === nextEra.requiredEra) {
        			// Mostramos los elementos principales y ocultamos el mensaje de "era final"
        			evolveButton.classList.remove('hidden');
        			evolutionRequirements.classList.remove('hidden');
        			evolutionStatus.classList.add('hidden');
        
        			// El texto del bot√≥n ahora es constante y no cambia
        			evolveButton.innerHTML = `Evolucionar a ${nextEra.name}`;
        
        			// Verificamos todas las condiciones necesarias para evolucionar
        			const hasEnoughPoints = gameState.prestigePoints >= nextEra.prestigeCost;
        			const allMissionsDone = areAllMissionsCompletedForEra(gameState.currentEra);
        			const allAchievementsDone = areAllAchievementsUnlockedForEra(gameState.currentEra);
        			
        			// Construimos la lista de requisitos din√°micamente
        			let requirementsHtml = '';
        			
        			// Requisito 1: Puntos de Innovaci√≥n
        			const pointsClass = hasEnoughPoints ? 'met' : 'unmet';
        			requirementsHtml += `<p class="${pointsClass}">- Tener ${nextEra.prestigeCost} Puntos de Innovaci√≥n (${gameState.prestigePoints}/${nextEra.prestigeCost})</p>`;
        			
        			// Requisito 2: Misiones
        			const missionsClass = allMissionsDone ? 'met' : 'unmet';
        			requirementsHtml += `<p class="${missionsClass}">- Completar todas las misiones de la era actual</p>`;
        
        			// Requisito 3: Logros
        			const achievementsClass = allAchievementsDone ? 'met' : 'unmet';
        			requirementsHtml += `<p class="${achievementsClass}">- Desbloquear todos los logros de la era actual</p>`;
        			
        			// Actualizamos el contenedor con la lista de requisitos
        			evolutionRequirements.innerHTML = requirementsHtml;
        
        			// El bot√≥n solo se activa si TODAS las condiciones son verdaderas
        			const allConditionsMet = hasEnoughPoints && allMissionsDone && allAchievementsDone;
        			
        			evolveButton.classList.toggle('is-disabled', !allConditionsMet);
        			evolveButton.classList.toggle('can-afford-glow', allConditionsMet);
        
        		} else {
        			// Si no estamos en la era correcta para evolucionar, ocultamos todo
        			evolveButton.classList.add('hidden');
        			evolutionRequirements.classList.add('hidden');
        			evolutionStatus.classList.add('hidden');
        		}
        	} else {
        		// Si no hay m√°s eras, mostramos el mensaje de "era final"
        		evolveButton.classList.add('hidden');
        		evolutionRequirements.classList.add('hidden');
        		evolutionStatus.classList.remove('hidden');
        		evolutionStatus.textContent = '¬°Has alcanzado la √∫ltima era tecnol√≥gica disponible!';
        	}
        	
        	// === Actualizaci√≥n de la Tienda ===
        	updateShopUI();
        	
        	// === Actualizaci√≥n de todas las Mejoras Individuales ===
        	const currentEraUpgrades = upgrades[gameState.currentEra];
            if (!currentEraUpgrades) return;
        
            for (const categoryId in currentEraUpgrades) {
        		for (const upgradeId in currentEraUpgrades[categoryId].items) {
        			const buyButton = document.getElementById(`buy-${upgradeId}`);
        			const upgradeContainer = document.getElementById(`upgrade-container-${upgradeId}`);
        			const upgradeInfoDiv = upgradeContainer ? upgradeContainer.querySelector('.upgrade-info') : null;
        
        			if (!buyButton || !upgradeContainer || !upgradeInfoDiv) continue;
        			
        			const upgradeData = findUpgradeById(upgradeId);
                    const currentLevel = gameState.upgradeLevels[upgradeId] || 0;
                    const isMaxed = upgradeData.maxLevel && currentLevel >= upgradeData.maxLevel;
        
                    // Actualiza la ganancia que se muestra
                    const gainSpan = document.getElementById(`gain-${upgradeId}`);
                    if (upgradeData && gainSpan) {
                        const effect = upgradeData.baseEffect;
                        let gainText = '';
        				switch (upgradeData.type) {
        					case 'dpc':
        						gainText = `(A√±ade +$${formatNumber(effect)}/clic)`;
        						break;
        					case 'dps':
        						gainText = `(A√±ade +$${formatNumber(effect)}/s)`;
        						break;
        					case 'dpc_multiplier':
        						gainText = `(Bonus de +${effect * 100}% por clic)`;
        						break;
        					case 'dps_multiplier':
        						gainText = `(Bonus de +${effect * 100}% pasivo)`;
        						break;
        				}
                        gainSpan.textContent = gainText;
                    }
        
        			// Actualiza el nivel que se muestra
        			const levelSpan = document.getElementById(`level-${upgradeId}`);
        			if(levelSpan) levelSpan.textContent = currentLevel;
                
                    // Limpia los requisitos antiguos para evitar duplicados
        			const oldReqsDiv = upgradeInfoDiv.querySelector('.requirements-list');
        			if (oldReqsDiv) oldReqsDiv.remove();
        
                    // CASO 1: La mejora est√° al nivel m√°ximo
                    if (isMaxed) {
                        buyButton.innerHTML = 'NIVEL M√ÅX.';
                        buyButton.classList.add('is-disabled');
                        buyButton.classList.remove('can-afford-glow');
                        upgradeContainer.classList.remove('is-locked');
                        buyButton.title = 'Esta mejora ha alcanzado su nivel m√°ximo';
        
                    } else {
                        // CASO 2: La mejora no est√° al m√°ximo
                        const cost = calculateUpgradeCost(upgradeId);
                        buyButton.innerHTML = `$<span id="cost-${upgradeId}">${formatNumber(cost)}</span>`;
        
                        const hurdle = findNextRequirementHurdle(upgradeId);
                    
                        // Sub-caso 2.1: La mejora est√° bloqueada por requisitos
                        if (hurdle) {
                            upgradeContainer.classList.add('is-locked');
                            buyButton.classList.add('is-disabled');
                            buyButton.classList.remove('can-afford-glow');
                            buyButton.title = 'Requisitos no cumplidos';
        
                            let requirementsHtml = `<div class="requirements-list is-locked-info">`;
                            requirementsHtml += `<p class="unmet">Bloqueado en Nivel ${hurdle.level}</p>`;
        
                            for (const reqId in hurdle.reqs) {
                                const requiredUpgrade = findUpgradeById(reqId); 
                                const requiredLevel = hurdle.reqs[reqId];
                                const currentReqLevel = gameState.upgradeLevels[reqId] || 0;
                                const isMet = currentReqLevel >= requiredLevel;
                                const statusClass = isMet ? 'met' : 'unmet';
                            
                                if(requiredUpgrade) {
                                    requirementsHtml += `
                                        <p class="${statusClass}">
                                            - ${requiredUpgrade.name} (${currentReqLevel}/${requiredLevel})
                                        </p>`;
                                }
                            }
                            requirementsHtml += '</div>';
                            upgradeInfoDiv.insertAdjacentHTML('beforeend', requirementsHtml);
        
                        } else {
                            // Sub-caso 2.2: La mejora est√° disponible para comprar
                            upgradeContainer.classList.remove('is-locked');
                            const canAfford = gameState.money >= cost;
                            buyButton.classList.toggle('is-disabled', !canAfford);
                            buyButton.classList.toggle('can-afford-glow', canAfford);
                            buyButton.title = '';
                        }
                    }
        		}
        	}
        }
        
        // ---- L√ìGICA PARA LA ANIMACI√ìN DE INTRODUCCI√ìN ----
        
        // Funci√≥n de ayuda para escribir texto con efecto de m√°quina de escribir
        async function typeWriter(element, text, speed = 50) {
            let content = element.innerHTML.replace(/<span class="cursor">_<\/span>/g, '');
            for (let i = 0; i < text.length; i++) {
                content += text.charAt(i);
                element.innerHTML = content + '<span class="cursor">_</span>';
                await sleep(speed);
            }
            element.innerHTML = content;
        }
        
        // La funci√≥n principal que orquesta la nueva introducci√≥n
        async function startIntroAnimation(onComplete) {
            const terminalScreen = document.getElementById('intro-terminal-screen');
            const terminalContent = document.getElementById('intro-terminal-content');
            const skipButton = document.getElementById('skip-intro-button');
        
            terminalContent.innerHTML = '';
            showScreen('intro-terminal-screen');
            skipButton.classList.remove('hidden');
        
            let isSkipped = false;
            const skipIntro = () => {
                if(isSkipped) return;
                isSkipped = true;
                stopSound('introCrtHum');
                stopSound('keyboardTyping');
                skipButton.classList.add('hidden');
                if (onComplete) onComplete();
            };
            skipButton.addEventListener('click', skipIntro, { once: true });
        
            const runStep = async (stepFunction) => {
                if (isSkipped) return;
                await stepFunction();
            };
        
            // --- INICIO DE LA SECUENCIA ---
            await runStep(async () => {
                playSound('introPowerOn');
                await sleep(500);
                playSound('introCrtHum');
            });
        
            // ACTO 1: EL ENCENDIDO
            await runStep(async () => {
                playSound('keyboardTyping');
                await typeWriter(terminalContent, 'IDC-DOS v1.0 - (C) 1985 Imperio de la Conexi√≥n\n');
                await typeWriter(terminalContent, 'Iniciando desde el Garaje...\n\n');
                stopSound('keyboardTyping');
            });
        
            // ACTO 2: EL INTENTO
            await runStep(async () => {
                await sleep(1000);
                await typeWriter(terminalContent, '<span class="prompt">> </span>');
                playSound('keyboardTyping');
                await typeWriter(terminalContent, 'connect 555-1985');
                stopSound('keyboardTyping');
        
                await sleep(500);
                terminalContent.innerHTML += '\n';
                playSound('introRotaryPhone');
                await typeWriter(terminalContent, 'MARCANDO...', 100);
                await sleep(3000);
        
                await typeWriter(terminalContent, ' <span class="status-fail">ERROR: L√çNEA OCUPADA</span>\n');
            });
        
            await runStep(async () => {
                await sleep(1500);
                await typeWriter(terminalContent, '<span class="prompt">> </span>');
                playSound('keyboardTyping');
                await typeWriter(terminalContent, 'connect 555-2024 --override');
                stopSound('keyboardTyping');
        
                await sleep(500);
                terminalContent.innerHTML += '\n';
                playSound('introRotaryPhone');
                await typeWriter(terminalContent, 'MARCANDO...', 100);
                await sleep(4000);
                
                await typeWriter(terminalContent, ' <span class="status-fail">ERROR: SE√ëAL D√âBIL</span>\n');
            });
        
            // ACTO 3: EL √âXITO
            await runStep(async () => {
                await sleep(1500);
                await typeWriter(terminalContent, '<span class="prompt">> </span>');
                playSound('keyboardTyping');
                await typeWriter(terminalContent, 'connect mundial --protocolo=genesis');
                stopSound('keyboardTyping');
                
                await sleep(500);
                terminalContent.innerHTML += '\n';
                playSound('introRotaryPhone');
                await typeWriter(terminalContent, 'MARCANDO...', 100);
                await sleep(5000);
                
                playSound('introSuccess');
                await typeWriter(terminalContent, ' <span class="status-success">CONEXI√ìN ESTABLECIDA</span>\n\n');
                
                const asciiArt = `
             _________
            / ======= \\
           / __________\\
          | ___________ |
          | | -       | |
          | |         | |
          | |_________| |
          \\=____________/
          / """"""""""" \\
         / ::::::::::::: \\
        (_________________)
        `;
                await typeWriter(terminalContent, `<span class="ascii-art">${asciiArt}</span>`, 5);
                await typeWriter(terminalContent, '\nBIENVENIDO A IMPERIO DE LA CONEXI√ìN\n');
            });
        
            // Finalizaci√≥n
            await runStep(async () => {
                stopSound('introCrtHum');
                const finalPrompt = document.createElement('div');
                finalPrompt.className = 'final-prompt';
                finalPrompt.textContent = 'TOCA PARA EMPEZAR TU IMPERIO';
                terminalContent.appendChild(finalPrompt);
        
                skipButton.classList.add('hidden');
                
                terminalScreen.addEventListener('click', () => {
                    if (!isSkipped) {
                        isSkipped = true;
                        if (onComplete) onComplete();
                    }
                }, { once: true });
            });
        }
        
        // ---- L√ìGICA PARA EL TUTORIAL INTERACTIVO (SISTEMA GUIADO V2) ----
        
        let currentTutorialStep = 0;
        let highlightedElement = null;
        let tutorialResizeHandler = null;
        
        const tutorialSteps = [
            { elementId: 'main-click-button', text: '¬°Bienvenido a tu imperio! Este es el bot√≥n principal. Haz clic en √©l para establecer conexiones y ganar tu primer dinero.', position: 'top', isClickable: true },
            { elementId: 'money-display', text: 'Aqu√≠ ver√°s tu Capital. ¬°El dinero que ganas de cada conexi√≥n aparecer√° aqu√≠!', position: 'bottom' },
            { elementId: 'dps-display', text: 'Y aqu√≠ ver√°s tu Flujo de Red. Representa los ingresos pasivos que ganas cada segundo gracias a tus mejoras.', position: 'bottom' },
            { elementId: 'game-tab-bar', text: 'Esta es tu barra de navegaci√≥n principal. Te permite cambiar entre diferentes paneles del juego.', position: 'top' },
            { elementId: 'upgrades-tab-button', text: 'Toca aqu√≠ para ir a la pesta√±a de Mejoras, donde podr√°s invertir tu dinero para aumentar tus ganancias.', position: 'top' },
            { elementId: 'evolution-tab-button', text: 'Y esta es la pesta√±a de Evoluci√≥n. Cuando progreses lo suficiente, aqu√≠ podr√°s relanzar tu imperio para obtener grandes bonificaciones.', position: 'top' },
            { text: '¬°Ya sabes lo b√°sico! Explora, invierte y haz crecer tu red. ¬°El mundo est√° esperando a ser conectado!', position: 'center' }
        ];
        
        function startInteractiveTutorial() {
            if (!document.getElementById('tutorial-overlay-container')) {
                const overlayContainer = document.createElement('div');
                overlayContainer.id = 'tutorial-overlay-container';
                for (const position of ['top', 'bottom', 'left', 'right']) {
                    const panel = document.createElement('div');
                    panel.id = `tutorial-overlay-${position}`;
                    panel.className = 'tutorial-overlay-panel';
                    overlayContainer.appendChild(panel);
                }
        
                const tooltip = document.createElement('div');
                tooltip.id = 'tutorial-tooltip';
                tooltip.innerHTML = `<p id="tutorial-text"></p><button id="tutorial-next-button">Continuar</button>`;
                
                document.body.appendChild(overlayContainer);
                document.body.appendChild(tooltip);
        
                document.getElementById('tutorial-next-button').addEventListener('click', advanceTutorial);
            }
        	
            tutorialResizeHandler = () => {
                if (document.getElementById('tutorial-overlay-container').classList.contains('visible')) {
                    showTutorialStep(currentTutorialStep);
                }
            };
        
            window.addEventListener('resize', tutorialResizeHandler);
            currentTutorialStep = 0;
            showTutorialStep(currentTutorialStep);
        }
        
        function showTutorialStep(stepIndex) {
            const overlayContainer = document.getElementById('tutorial-overlay-container');
            const tooltip = document.getElementById('tutorial-tooltip');
            const nextButton = document.getElementById('tutorial-next-button');
        
            if (highlightedElement) {
                highlightedElement.classList.remove('tutorial-glow-effect');
                highlightedElement.removeEventListener('click', advanceTutorial);
            }
            
            if (stepIndex >= tutorialSteps.length) {
                endTutorial();
                return;
            }
        
            overlayContainer.classList.add('visible');
            tooltip.classList.add('visible');
        
            const step = tutorialSteps[stepIndex];
            document.getElementById('tutorial-text').textContent = step.text;
        
            if (step.elementId) {
                highlightedElement = document.getElementById(step.elementId);
                if (highlightedElement) {
                    highlightedElement.classList.add('tutorial-glow-effect');
                    positionTooltip(tooltip, highlightedElement, step.position);
                    updateOverlayPanels(highlightedElement);
                    
                    if (step.isClickable) {
                        nextButton.style.display = 'none';
                        highlightedElement.addEventListener('click', advanceTutorial, { once: true });
                    } else {
                        nextButton.style.display = 'block';
                    }
                }
            } else {
                updateOverlayPanels(null);
                positionTooltip(tooltip, null, 'center');
                nextButton.style.display = 'block';
            }
        }
        
        function updateOverlayPanels(element) {
            const topPanel = document.getElementById('tutorial-overlay-top');
            const bottomPanel = document.getElementById('tutorial-overlay-bottom');
            const leftPanel = document.getElementById('tutorial-overlay-left');
            const rightPanel = document.getElementById('tutorial-overlay-right');
            
            if (!element) {
                topPanel.style.height = '100vh';
                bottomPanel.style.height = '0';
                leftPanel.style.height = '0';
                rightPanel.style.height = '0';
                return;
            }
        
            const rect = element.getBoundingClientRect();
            const vh = window.innerHeight;
            const vw = window.innerWidth;
        
            topPanel.style.height = `${rect.top}px`;
            topPanel.style.width = '100vw';
        
            bottomPanel.style.top = `${rect.bottom}px`;
            bottomPanel.style.height = `${vh - rect.bottom}px`;
            bottomPanel.style.width = '100vw';
        
            leftPanel.style.top = `${rect.top}px`;
            leftPanel.style.height = `${rect.height}px`;
            leftPanel.style.width = `${rect.left}px`;
            
            rightPanel.style.top = `${rect.top}px`;
            rightPanel.style.left = `${rect.right}px`;
            rightPanel.style.height = `${rect.height}px`;
            rightPanel.style.width = `${vw - rect.right}px`;
        }
        
        function advanceTutorial() {
            currentTutorialStep++;
            showTutorialStep(currentTutorialStep);
        }
        
        function endTutorial() {
            document.getElementById('tutorial-overlay-container').classList.remove('visible');
            document.getElementById('tutorial-tooltip').classList.remove('visible');
            if (highlightedElement) {
                highlightedElement.classList.remove('tutorial-glow-effect');
            }
            localStorage.setItem('tutorialShown', 'true');
        
            if (tutorialResizeHandler) {
                window.removeEventListener('resize', tutorialResizeHandler);
            }
        }
        
        function positionTooltip(tooltip, element, position) {
            const screenPadding = 10;
        
            if (!element) {
                tooltip.style.top = '50%';
                tooltip.style.left = '50%';
                tooltip.style.transform = 'translate(-50%, -50%)'; 
                return;
            }
        
            const rect = element.getBoundingClientRect();
            const vh = window.innerHeight;
            const vw = window.innerWidth;
        
            tooltip.style.transform = '';
        
            if (position === 'top' && rect.top - tooltip.offsetHeight < 0) {
                position = 'bottom';
            } else if (position === 'bottom' && rect.bottom + tooltip.offsetHeight > vh) {
                position = 'top';
            }
        
            const spacing = 15;
            if (position === 'top') {
                tooltip.style.top = `${rect.top - tooltip.offsetHeight - spacing}px`;
            } else {
                tooltip.style.top = `${rect.bottom + spacing}px`;
            }
        
            let left = rect.left + (rect.width / 2) - (tooltip.offsetWidth / 2);
        
            if (left < screenPadding) {
                left = screenPadding;
            }
            if (left + tooltip.offsetWidth > vw - screenPadding) {
                left = vw - tooltip.offsetWidth - screenPadding;
            }
            tooltip.style.left = `${left}px`;
        }
        
        // ---- L√ìGICA DEL SISTEMA DE NOTIFICACIONES ----
        function showNotification(title, rewardText, icon) {
            const container = document.getElementById('notification-container');
            if (!container) return;
        
            const notification = document.createElement('div');
            notification.className = 'notification slide-in-down';
        
            notification.innerHTML = `
                <div class="notification-icon">${icon}</div>
                <div class="notification-text">
                    <h5>${title}</h5>
                    <p>${rewardText}</p>
                </div>
            `;
            container.appendChild(notification);
            setTimeout(() => {
                notification.classList.remove('slide-in-down');
                notification.classList.add('fade-out-up');
                setTimeout(() => {
                    notification.remove();
                }, 500);
            }, 4000);
        }
        
        function renderStoryCard(index) {
            const cardData = storyData[index];
            if (!cardData) return;
        
            const eraDisplay = document.getElementById('story-era-display');
            const titleDisplay = document.getElementById('story-title-display');
            const textDisplay = document.getElementById('story-text-display');
            const indicator = document.getElementById('story-card-indicator');
            const container = document.getElementById('story-card-container');
        
            container.style.opacity = 0;
        
            setTimeout(() => {
                eraDisplay.textContent = cardData.era;
                titleDisplay.textContent = cardData.title;
                textDisplay.textContent = cardData.text;
                indicator.textContent = `${index + 1} / ${storyData.length}`;
                container.style.opacity = 1;
            }, 300);
        }
        
        // ---- L√ìGICA PARA LA PANTALLA DE CR√âDITOS ----
        
        let isCreditsRunning = false;
        let isCreditsSkipped = false;
        
        const creditsLines = [
            'INICIANDO TRANSMISI√ìN DE CR√âDITOS...',
            'IDC_OS v1.0 - REGISTRO DE PRODUCCI√ìN',
            '========================================',
            '',
            'ROL               : DESARROLLO PRINCIPAL',
            'NOMBRE            : ClanHater',
            '',
            'ROL               : CONTROL DE CALIDAD Y DEPURACI√ìN',
            'NOMBRE            : ClanHater',
            '',
            '----------------------------------------',
            'RECURSOS EXTERNOS:',
            '----------------------------------------',
            '',
            'ACTIVOS DE SONIDO : Pixabay',
            'ACTIVOS VISUALES  : Nanobanana & Google Fonts',
            'BIBLIOTECA DE AUDIO: Howler.js',
            '',
            '========================================',
            '...Se han transmitido 1.337 terabytes de datos de gatitos durante la creaci√≥n de este juego...',
            '...Ning√∫n teclado fue da√±ado permanentemente en el proceso...',
            '',
            'GRACIAS POR JUGAR',
            '',
            '>>> FIN DE LA TRANSMISI√ìN <<<'
        ];
        
        async function startCreditsSequence() {
            if (isCreditsRunning) return;
        
            isCreditsRunning = true;
            isCreditsSkipped = false;
            const container = document.getElementById('credits-content-container');
            container.innerHTML = '';
        
            for (const line of creditsLines) {
                if (isCreditsSkipped) {
                    const remainingLines = creditsLines.slice(creditsLines.indexOf(line)).join('\n');
                    container.innerHTML += remainingLines;
                    break;
                }
                
                const p = document.createElement('p');
                container.appendChild(p);
                await typeWriter(p, line, 20);
                container.scrollTop = container.scrollHeight;
            }
        
            const cursor = container.querySelector('.cursor');
            if (cursor) cursor.remove();
            isCreditsRunning = false;
        }
        
        function stopCreditsSequence() {
            isCreditsSkipped = true;
        }
        
        // ---- L√ìGICA DEL GESTOR DE CINEM√ÅTICAS DE ERA (V2 - NARRATIVA) ----
        
        const cinematics = {
            'era2': async function() {
                return new Promise(async (resolve) => {
                    const cinematicScreen = document.getElementById('era-cinematic-screen');
                    const era1Terminal = document.getElementById('cinematic-era1-shutdown');
                    const biosScreen = document.getElementById('cinematic-bios');
                    const desktopScreen = document.getElementById('cinematic-desktop');
                    const welcomeBox = document.getElementById('cinematic-welcome-box');
        
                    showScreen('era-cinematic-screen');
                    biosScreen.classList.add('hidden');
                    desktopScreen.classList.add('hidden');
                    era1Terminal.classList.remove('hidden');
                    era1Terminal.innerHTML = '';
                    
                    // ACTO 1
                    await sleep(1000);
                    playSound('keyboardTyping');
                    await typeWriter(era1Terminal, '> AN√ÅLISIS DE RED COMPLETO...\n> EFICIENCIA DE L√çNEAS DE COBRE: 3.4%\n> SATURACI√ìN DE RED INMINENTE.\n\n');
                    await sleep(1500);
                    await typeWriter(era1Terminal, '> INICIANDO PROTOCOLO DE ACTUALIZACI√ìN "NUEVO MILENIO".\n> INICIANDO APAGADO DEL SISTEMA...');
                    stopSound('keyboardTyping');
        
                    await sleep(2000);
                    playSound('shutdown');
                    cinematicScreen.style.transition = 'transform 0.3s';
                    cinematicScreen.style.transform = 'scale(0.01, 0.2)';
                    
                    await sleep(300);
        
                    // ACTO 2
                    cinematicScreen.style.transform = 'scale(1)';
                    era1Terminal.classList.add('hidden');
                    biosScreen.classList.remove('hidden');
                    biosScreen.innerHTML = 'IDC BIOS v2.0, (c) 1995 Imperio de la Conexi√≥n Corp.<br>';
                    await sleep(1000);
                    playSound('biosBeep');
                    biosScreen.innerHTML += 'Memory Test: 16384K OK<br><br>';
                    await sleep(1500);
                    biosScreen.innerHTML += 'Detecting Primary Master... IDC Hard Disk 500MB<br>';
                    biosScreen.innerHTML += 'Detecting Primary Slave... None<br>';
                    await sleep(1500);
                    biosScreen.innerHTML += '<br>Booting from Hard Disk...<br>';
                    
                    await sleep(2000);
        
                    // ACTO 3
                    biosScreen.classList.add('hidden');
                    desktopScreen.classList.remove('hidden');
                    desktopScreen.style.backgroundImage = "url('assets/images/win95-desktop.png')";
                    playSound('win95Startup');
        
                    await sleep(3000);
        
                    welcomeBox.innerHTML = `
                        <h2>Bienvenido a los 90</h2>
                        <p>La red global es una realidad. El sonido del m√≥dem es la puerta de entrada a la Autopista de la Informaci√≥n...</p>
                    `;
                    welcomeBox.classList.add('visible');
        
                    await sleep(2000);
                    playSound('modemDialup');
        
                    await sleep(9000);
        
                    // FINALIZACI√ìN
                    cinematicScreen.classList.add('hidden');
                    welcomeBox.classList.remove('visible');
                    resolve();
                });
            }
        };
        
        function renderPopup(popupType) {
            // Si ya hay un pop-up en pantalla, no hacemos nada para evitar solapamientos
            if (activePopupElement) {
                return;
            }
        
            const container = document.getElementById('popup-container');
            const template = document.getElementById(`popup-template-${popupType}`);
        
            if (!container || !template) {
                console.error("No se encontr√≥ el contenedor o la plantilla del pop-up.");
                return;
            }
        
            // 1. Clonamos la plantilla para no destruirla
            const popupClone = template.cloneNode(true);
            popupClone.id = `active-popup-${popupType}`; // Le damos un ID √∫nico
            activePopupElement = popupClone; // Guardamos la referencia
        
            // 2. A√±adimos el listener para el clic
            popupClone.addEventListener('click', () => {
                // Determinamos qu√© funci√≥n de main.js llamar seg√∫n el tipo
                switch (popupType) {
                    case 'jackpot':
                        applyJackpot();
                        break;
                    case 'clickFrenzy':
                        applyClickFrenzy();
                        break;
                    case 'dpsOverload':
                        applyDpsOverload();
                        break;
                }
                // Ocultamos el pop-up inmediatamente despu√©s del clic
                hidePopup();
            }, { once: true }); // El listener se elimina solo despu√©s de un clic
        
            // 3. A√±adimos el clon al contenedor para que sea visible
            container.appendChild(popupClone);
        
            // 4. Programamos su autodestrucci√≥n si el jugador no hace clic
            if (popupTimeoutId) clearTimeout(popupTimeoutId); // Limpiamos cualquier temporizador anterior
            popupTimeoutId = setTimeout(hidePopup, POPUP_LIFESPAN_SECONDS * 1000);
        }
        
        function hidePopup() {
            if (activePopupElement) {
                activePopupElement.remove(); // Elimina el elemento del DOM
                activePopupElement = null;     // Limpia la referencia
            }
            if (popupTimeoutId) {
                clearTimeout(popupTimeoutId); // Limpia el temporizador
                popupTimeoutId = null;
            }
        }
        
        // ---- RENDERIZADO DE BUFFS ACTIVOS ----
        function updateActiveBuffsUI() {
            const container = document.getElementById('active-buffs-container');
            if (!container) return;
        
            // Itera sobre los buffs que queremos mostrar
            for (const buffKey in gameState.activeBuffs) {
                const buff = gameState.activeBuffs[buffKey];
                const buffElement = document.getElementById(`buff-${buffKey}`);
                
                // Si el buff est√° activo pero no existe su icono, lo creamos
                if (buff.timeLeft > 0 && !buffElement) {
                    const buffIcons = {
                        clickFrenzy: 'üñ±Ô∏èüí®',
                        dpsOverload: 'üìà'
                    };
                    const iconHTML = `
                        <div class="buff-icon" id="buff-${buffKey}">
                            <svg viewBox="0 0 36 36">
                                <path class="progress-ring-bg" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                                <path class="progress-ring-fg" stroke-dasharray="100, 100" d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831" />
                            </svg>
                            <span class="buff-icon-emoji">${buffIcons[buffKey] || '‚ùì'}</span>
                        </div>
                    `;
                    container.insertAdjacentHTML('beforeend', iconHTML);
                }
                // Si el buff ya no est√° activo pero su icono todav√≠a existe, lo eliminamos
                else if (buff.timeLeft <= 0 && buffElement) {
                    buffElement.remove();
                }
        
                // Si el icono existe, actualizamos su barra de progreso
                if (buffElement) {
                    const constants = {
                        clickFrenzy: CLICK_FRENZY_DURATION_SECONDS,
                        dpsOverload: DPS_OVERLOAD_DURATION_SECONDS
                    };
                    const totalDuration = constants[buffKey];
                    const progress = (buff.timeLeft / totalDuration) * 100;
                    const progressBar = buffElement.querySelector('.progress-ring-fg');
                    if (progressBar) {
                        progressBar.style.strokeDasharray = `${progress}, 100`;
                    }
                }
            }
        }
        ---------- FIN CONTENIDO ----------

